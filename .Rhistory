summarise(mean_math = mean(math))  # math 평균 산출
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())                    # 학생 수
exam %>%
group_by(class) %>%                # class별로 분리
summarise(mean_math = mean(math))  # math 평균 산출
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())                    # 학생 수
mpg %>%
group_by(manufacturer) %>%
filter(class=="suv") %>%
mutate(tdis= (cty+hwy)/2) %>%
summarise(mdis=mean(tdis)) %>%
arrange(desc(mdis)) %>%
head(5)
myiris <- iris %>% rename(sl="Sepal.Length", sw="Sepal.Width") %>% head
myiris
iris %>% select(Species)
iris %>% distinct(Species)
exam %>% select(class, english)
exam %>% distinct(class, english)
exam %>% distinct(class, english)
exam %>% select(class, english)
emp <- read.csv("data/emp.csv")
emp
# 1
emp %>% filter(job="MANAGER")
# 1
emp %>% filter(job == "MANAGER")
View(emp)
# 2
emp %>% select(empno, ename, sal)
emp
# 3
emp %>% select(-empno)
exam %>% count(class)         # count() is a short-hand for group_by() + tally()
# 5
emp %>% count(job)
# 6
emp %>% filter(sal >= 1000 & sal <= 3000) %>% select(ename,sal,deptno)
# 7
emp %>% filter(job != "ANALYST") %>% select(ename, job, sal)
# 8
emp %>% filter(job == "SALESMAN" | job == "ANALYST") %>% select(ename, job)
exam %>% select(class, english)
exam %>% distinct(class, english)
iris %>% select(Species)
iris %>% distinct(Species)
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = total/3) %>%   # 총평균 변수 추가
head
iris %>% pull(Species) # 벡터로 리턴
iris %>% pull(Sepal.Length)
iris %>% pull(Sepal.Length, Species) # 뒤에 있는 아규먼트가 name으로 namedvector로 리턴
iris %>% select_if(is.numeric) %>% head
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal")) %>% head(1)
iris %>% head(1) %>% select(starts_with("Petal"))
iris %>% select(starts_with("petal")) %>% head(1)
iris %>% select(starts_with("petal", ignore.case=F)) %>% head(1)
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head(10)              # 앞부분 10행까지 추출
#[ mutate() ] 파생변수 생성
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
# 전체 요약하기
# [ summarise() ]
exam %>% summarise(n = n()) # n()은 데이터 갯수를 추출하는 함수
exam %>% tally()
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
# 9
emp %>% summarise(mean_sal = mean(sal))
# 9
emp %>% summarise(sum_sal = sum(sal))
# 9
emp %>% group_by(job) %>% summarise(sum_sal = sum(sal))
# 10
emp %>% arrange(desc(sal))
# 10
emp %>% arrange(sal)
iris %>% select(Species)
iris %>% distinct(Species)
exam %>% select(class, english)
# 12
empnew <- emp %>% rename(salary="sal", commrate="comm")
empnew
exam %>% distinct(class, english)
exam %>% select(class, english)
iris %>% select(Species)
iris %>% distinct(Species)
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
arrange(total) %>%                            # 총합 변수 기준 정렬
head                                          # 일부 추출
iris %>% pull(Species) # 벡터로 리턴
iris %>% pull(Sepal.Length)
iris %>% pull(Sepal.Length, Species) # 뒤에 있는 아규먼트가 name으로 namedvector로 리턴
iris %>% pull(Species) # 벡터로 리턴
iris %>% pull(-1) # 위치 값으로 리턴 가능
iris %>% pull(-5)
iris %>% pull()
iris %>% select(Species)
iris %>% select_if(is.numeric) %>% head
iris %>% select(-Sepal.Length, -Petal.Length) %>% head
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal")) %>% head(1)
iris %>% head(1) %>% select(starts_with("Petal"))
# 집단별로 요약하기
exam %>%
group_by(class) %>% summarise(n = n())
# 13
emp %>% group_by(deptno)
# 13
emp %>% count(deptno)
# 13
emp %>% count(deptno) %>% arrange(desc(deptno)) %>% head(1)
# 13
emp %>% count(deptno) %>% arrange(desc(deptno)) %>% head(1) select(deptno)
# 13
emp %>% count(deptno) %>% arrange(desc(deptno)) %>% head(1) %>% select(deptno)
# 14
emp %>% mutate(enamelength=length(ename))
length(ename)
# 14
emp %>% mutate(enamelength = length(emp$ename))
length(emp$ename)
# 14
emp %>% mutate(enamelength = length(emp$ename))
# 14
emp %>% mutate(enamelength = length(emp$ename)) %>% arrang(enamelength) %>% filter(ename)
# 14
emp %>% mutate(enamelength = length(emp$ename)) %>% arrange(enamelength) %>% filter(ename)
# 14
emp %>% mutate(enamelength = length(emp$ename)) %>% arrange(enamelength) %>% select(ename)
# 14
emp %>% mutate(enamelength = nchar(ename)) %>% arrange(enamelength) %>% select(ename)
# 15
emp %>% filter(!is.na(comm))
# 15
emp %>% filter(!is.na(comm)) %>% count(ename)
# 15
emp %>% filter(!is.na(comm)) %>% count()
str(ggplot2::mpg)
# 16
mpg <- as.data.frame(ggplot2::mpg)
str(mpg)
dim(mpg)
head(mpg, 10)
tail(mpg, 10)
View(mpg)
# 집단별로 요약하기
exam %>%
group_by(class) %>% summarise(n = n())
exam %>%
group_by(class) %>%                # class별로 분리
summarise(mean_math = mean(math))  # math 평균 산출
exam %>%
group_by(class) %>%                   # class별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())                    # 학생 수
exam
mpg %>% summarise()
exam %>% tally()
str(exam %>% summarise(mean_math = mean(math),
mean_english = mean(english),
mean_science = mean(science))) # 모든 과목의 평균 산출
mpg %>% count(manufacturer)
mpg %>% count(manufacturer) %>% count(model)
mpg %>% group_by(manufacturer) %>% count(model)
# 문제17
mpg %>% rename(city="cty", highway="hwy")
# 문제17
mpg %>% rename(city="cty", highway="hwy") %>% head()
# 18
mpg %>% filter(displ <= 4)
# 18
mpg %>% filter(displ <= 4) %>% head()
# 18
mpg %>% group_by(displ <= 4) %>% head()
# 18
mpg %>% group_by(displ <= 4) %>% summarise(hwy_mean = mean(hwy)) %>% head()
# 일부 추출
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head
mpg %>% mutate(displmax4 = ifelse(displ <= 4, "displ_max4"),
displmin5 = ifelse(displ >= 5, "displ_min5")) %>% head()
mpg %>% mutate(displmax4 = ifelse(displ <= 4, "displ_max4", ""),
displmin5 = ifelse(displ >= 5, "displ_min5", "")) %>% head()
mpg %>% mutate(displmax4 = ifelse(displ <= 4, "displ_max4", ""),
displmin5 = ifelse(displ >= 5, "displ_min5", "")) %>% head(10)
mpg %>% mutate(displmax4 = ifelse(displ <= 4, "displ_max4", ""),
displmin5 = ifelse(displ >= 5, "displ_min5", "")) %>% head(20)
mpg %>%
mutate(displmax4 = ifelse(displ <= 4, "displ_max4", ""),
displmin5 = ifelse(displ >= 5, "displ_min5", "")) %>%
select(displmax4, displmin5) %>% head(20)
mpg %>%
mutate(displmax4 = ifelse(displ <= 4, "displ_max4", ""),
displmin5 = ifelse(displ >= 5, "displ_min5", "")) %>%
select(hwy, displmax4, displmin5) %>% summarise(hwy_mean = mean(hwy)) %>% head(20)
# 18
mpg %>% group_by(displ <= 4) %>% summarise(hwy_mean = mean(hwy)) %>% head()
mpg %>% group_by(displ <= 4)
mpg %>%
filter(manufacturer == "audi" | manufacturer == "toyota") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
mpg %>%
filter(manufacturer == "chevrolet" | "ford")
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford")
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford" | manufacturer == "honda") %>%
group_by(model) %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford" | manufacturer == "honda") %>%
summarise(mean_hwy = mean(hwy))
head(mpg3)
# 19
mpg3 <- mpg %>% select(class, cty)
head(mpg3)
head(mpg3, 3)
mpg3 %>% distinct(class)
mpg3 %>% filter(class == "suv" | class == "compact")
mpg3 %>% filter(class == "suv" | class == "compact") %>% summarise(mean_cty = mean(cty))
# 18
mpg %>% filter(displ <= 4 | displ >= 5) %>% summarise(hwy_mean = mean(hwy)) %>% head()
mpg3 %>% filter(class == "suv" | class == "compact")
mpg3 %>% filter(class == "suv" | class == "compact") %>% summarise(mean_cty = mean(cty == "suv"))
# 20
mpg %>% filter(manufacturer == "audi") %>% group_by(model) %>% arrange(desc(hwy))
mpg %>% filter(manufacturer == "audi") %>% group_by(model)
mpg %>% filter(manufacturer == "audi")
# 20
mpg %>% filter(manufacturer == "audi") %>% group_by(model) %>% arrange(model, desc(hwy))
# 20
mpg %>% filter(manufacturer == "audi") %>% group_by(model) %>% arrange(desc(hwy), model)
# 20
mpg %>% filter(manufacturer == "audi") %>% group_by(model) %>% arrange(model, desc(hwy))
# 20
mpg %>% filter(manufacturer == "audi") %>% arrange(desc(hwy))
# 20
mpg %>% filter(manufacturer == "audi") %>% arrange(desc(hwy)) %>% head(5)
# 1단계
emp <- read.csv("data/emp.csv")
# 1
emp %>% filter(job == "MANAGER")
# 2
emp %>% select(empno, ename, sal)
# 3
emp %>% select(-empno)
# 4
emp %>% select(ename, sal)
# 5
emp %>% count(job)
# 6
emp %>% filter(sal >= 1000 & sal <= 3000) %>% select(ename,sal,deptno)
# 7
emp %>% filter(job != "ANALYST") %>% select(ename, job, sal)
# 8
emp %>% filter(job == "SALESMAN" | job == "ANALYST") %>% select(ename, job)
# 9
emp %>% group_by(job) %>% summarise(sum_sal = sum(sal))
# 9
emp %>% group_by(deptno) %>% summarise(sum_sal = sum(sal))
# 10
emp %>% arrange(sal)
# 11
emp %>% arrange(desc(sal)) %>% head(1)
# 12
empnew <- emp %>% rename(salary="sal", commrate="comm")
# 12
(empnew <- emp %>% rename(salary="sal", commrate="comm"))
str(empnew)
# 13
emp %>% count(deptno) %>% arrange(desc(deptno)) %>% head(1) %>% select(deptno)
# 14
emp %>% mutate(enamelength = nchar(ename)) %>% arrange(enamelength) %>% select(ename)
# 14
emp %>% mutate(enamelength = nchar(ename)) %>% arrange(enamelength) %>% select(ename, enamelength)
# 15
emp %>% filter(!is.na(comm)) %>% count()
# 16
mpg <- as.data.frame(ggplot2::mpg)
str(mpg)
#2
dim(mpg)
#3
head(mpg, 10)
#4
tail(mpg, 10)
#6
mpg %>% summarise() # mpg를 열 단위로 요약한다.
#7
mpg %>% count(manufacturer)
#8
mpg %>% group_by(manufacturer) %>% count(model)
# 17
mpg %>% rename(city="cty", highway="hwy") %>% head()
# 18
mpg %>% filter(displ <= 4 | displ >= 5) %>% summarise(hwy_mean = mean(hwy)) %>% head()
mpg %>%
filter(manufacturer == "audi" | manufacturer == "toyota") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford" | manufacturer == "honda") %>%
summarise(mean_hwy = mean(hwy))
# 19
mpg3 <- mpg %>% select(class, cty)
head(mpg3, 3)
head(mpg3)
mpg3 %>% group_by(class)
# 20
mpg %>% filter(manufacturer == "audi") %>% arrange(desc(hwy)) %>% head(5)
mpg3 %>% filter(class == "suv" | class == "compact") %>% summarise(mean_cty = mean(cty))
# 전체 요약하기
# [ summarise() ]
exam %>% summarise(n = n()) # n()은 데이터 갯수를 추출하는 함수
exam %>% tally()
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
mean(exam$math)
mpg3 %>% filter(class == "suv" | class == "compact") %>% mean()
mpg3 %>% filter(class == "suv" | class == "compact") %>% mean(pmg3)
summarise(mean_cty = mean(cty))
mpg3 %>% group_by(class)
mpg3 %>% distinct(class)
mpg3 %>% filter(class == "suv" | class == "compact") %>% summarise(mean_cty = mean(cty))
#6
mpg %>% summarise() # mpg를 열 단위로 요약한다.
# 17
mpg %>% rename(city="cty", highway="hwy") %>% head()
# 17
#1
mpg %>% rename(city="cty", highway="hwy") %>% str()
mpg %>%
filter(manufacturer == "audi" | manufacturer == "toyota") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty))
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford" | manufacturer == "honda") %>%
summarise(mean_hwy = mean(hwy))
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford" | manufacturer == "honda") %>%
mean()
mpg %>%
filter(manufacturer == "chevrolet" | manufacturer == "ford" | manufacturer == "honda") %>%
mean(hwy)
mpg3 %>% filter(class == "suv" | class == "compact") %>% summarise(mean_cty = mean(cty))
mpg3 %>% group_by(class)
mpg3 %>% distinct(class)
mpg3 %>% filter(class == "suv" | class == "compact") %>% summarise(mean_cty = mean(cty))
# 학생 1~5번 시험 데이터 생성
(group_a <- data.frame(id = c(1, 2, 3, 4, 5),  test = c(60, 80, 70, 90, 85)))
# 학생 6~10번 시험 데이터 생성
(group_b <- data.frame(id = c(6, 7, 8, 9, 10),  test = c(70, 83, 65, 95, 80)))
bind_rows(group_a, group_b)
bind_cols(group_a, group_b)
one <- data.frame(c(x = c(1:1000000), y = c(1:1000000)))
two <- data.frame(c(x = c(1:1000000), y = c(1:1000000)))
system.time(rbind(one, two))
system.time(bind_rows(one, two))
# 중간고사 데이터 생성
(test1 <- data.frame(no = c(1, 2, 3, 4, 5, 6),
midterm = c(60, 80, 70, 90, 85, 100)))
# 기말고사 데이터 생성
(test2 <- data.frame(no = c(1, 5, 3, 4, 2, 7),
final = c(70, 80, 65, 95, 83, 0)))
inner_join(test1, test2, by = "no")
left_join(test1, test2, by = "no")
# 다른 데이터 활용해 변수 추가하기
# 반별 담임교사 명단 생성
(exam <- read.csv("data/csv_exam.csv"))
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
View(df)
# 결측치 확인하기
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
# 변수별로 결측치 확인하기
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
# 결측치 포함된 상태로 분석
mean(df$score)  # 평균 산출
# 결측치 포함된 상태로 분석
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
#분석에 필요한 데이터까지 손실 될 가능성 유의
# 함수의 결측치 제외 기능 이용하기 - na.rm = T
mean(df$score, na.rm = T)  # 결측치 제외하고 평균 산출
sum(df$score, na.rm = T)   # 결측치 제외하고 합계 산출
df %>% filter(is.na(score))   # score가 NA인 데이터만 출력
df %>% filter(!is.na(score))  # score 결측치 제거
# 결측치 제외한 데이터로 분석하기
df_nomiss <- df %>% filter(!is.na(score))  # score 결측치 제거
mean(df_nomiss$score)                      # score 평균 산출
sum(df_nomiss$score)                       # score 합계 산출
# 여러 변수 동시에 결측치 없는 데이터 추출하기
# score, sex 결측치 제외
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
# 결측치가 하나라도 있으면 제거하기
df_nomiss2 <- na.omit(df)  # 모든 변수에 결측치 없는 데이터 추출
df_nomiss2
#summarise()에서 na.rm = T사용하기
# 결측치 생성
exam <- read.csv("data/csv_exam.csv")            # 데이터 불러오기
exam
table(is.na(exam))
is.na(exam)
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15행의 math에 NA 할당
is.na(exam)
table(is.na(exam))
# 평균으로 대체하기
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math가 NA면 55로 대체
#평균 구하기
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
# 다른 함수들에 적용
exam %>% summarise(mean_math = mean(math, na.rm = T),      # 평균 산출
sum_math = sum(math, na.rm = T),        # 합계 산출
median_math = median(math, na.rm = T))  # 중앙값 산출
boxplot(exam$math) # 결측치는 제거하고 그려줌
mean(exam$math, na.rm = T)  # 결측치 제외하고 math 평균 산출
# 평균으로 대체하기
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math가 NA면 55로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
exam$math
sum(is.na(exam$math))
mean(exam$math)  # math 평균 산출
df <- airquality
head(df)
dim(df)
View(df)
is.na(df)
row_na_cnt = apply(df, 1, function(x){sum(is.na(x))})
table(row_na_cnt)
col_na_cnt = apply(df, 2, function(x){sum(is.na(x))})
table(col_na_cnt)
df[is.na(df$Solar.R), "Solar.R"] = mean(df$Solar.R, na.rm = TRUE)
df[is.na(df$Ozone), "Ozone"] = mean(df$Ozone, na.rm = TRUE)
View(df)
install.packages("tidyr") # 추가
library(tidyr)
library(dplyr)
exam <- read.csv("data/csv_exam.csv")
exam[c(1, 5, 3, 8, 15, 20), "math"] <- NA
exam
fill(exam, math, .direction = "down")
fill(exam, math, .direction = "up")
exam[c(1, 5, 3, 8, 15, 20), "math"] <- NA
exam
fill(exam, math, .direction = "up")
exam[c(1, 5, 3, 8, 15, 20), "math"] <- NA
fill(exam, math, .direction = "updown")
exam[c(1, 5, 3, 8, 15, 20), "math"] <- NA
exam
fill(exam, math, .direction = "down")
exam[c(1, 5, 6, 7, 20), "english"] <- NA
exam
exam %>%
mutate(math2 = math) %>%
group_by(class) %>%
fill(math2, .direction = "up")
# 날짜 또는 날짜+시간 데이터 셋 만들기
dd <- seq(Sys.Date(),Sys.Date() + 10, "day")
dd
class(dd)
seq(Sys.time(),Sys.time() + 60*60*10, "hour")
seq(Sys.time(),Sys.time() + 60*10, "min")
seq(Sys.Date(), as.Date("2050-12-31"), "10 year")
dd
seq(Sys.Date(), as.Date("2050-12-31"), "10 year")
seq(Sys.Date(), length.out=10, by="year")
seq(Sys.Date(), length.out=10, by="10 year")
seq(Sys.Date(), length.out=10, by="day")
seq(Sys.time(), length.out=10, by="hour")
seq(Sys.time(), length.out=10, by="min")
seq(Sys.time(), length.out=10, by="sec")
data.frame(num=1:9, point=as.POSIXct(c("2022-01-04 09:30:02", "2022-01-04 09:30:04",
"2022-01-04 09:30:06", "2022-01-04 09:30:08", "2022-01-04 09:30:10",
"2022-01-04 09:30:12", "2022-01-04 09:30:14", "2022-01-04 09:30:16",
"2022-01-04 09:30:18")))
data.frame(num=1:9, point=seq(as.POSIXct("2022-01-04 09:30:02"), length.out=9,by="2 sec"))
data.frame(num=1:9, point=seq(as.POSIXct("2022-01-04 09:30:02"), length.out=9,by="sec"))
info <- data.frame(num=1001:1009, point=seq(as.POSIXct("2022-01-04 09:30:02"), length.out=9,by="2 sec"))
info
str(info)
info[c(1,3,9), "point"] <- NA
info
a<-fill(info, point, .direction = "updown")
plot(a)
str(a)
plot(a$point, a$num)
