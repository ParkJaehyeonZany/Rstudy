성적1<- 성적[3:5]
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(성적1), cex=0.8, fill=c('orange','skyblue','pink'))
(성적 <- read.table("data/성적.txt", header=TRUE))
warning()
warning(26)
(성적 <- read.table("data/성적.txt", header=TRUE))
성적1<- 성적[3:5]
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
warning(12)
warning(25)
warning(12)
(성적 <- read.table("data/성적.txt", header=TRUE))
성적1<- 성적[3:5]
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(성적1), cex=0.8, fill=c('orange','skyblue','pink'))
data.table(click)
click <- read.table("data/product_click.log", header=TRUE)
data.table(click)
table(click)
t(click)
t(table(click))
barplot(as.matrix(click), main="세로바 그래프 실습", beside=T, ylab="클릭수", xlab="상품ID", col=terrain.colors(10), family="dog")
barplot(as.matrix(click), main="세로바 그래프 실습")
barplot(as.matrix(click), main="세로바 그래프 실습", ylab="클릭수", xlab="상품ID", col=terrain.colors(10), family="dog")
# 파이그래프
(성적 <- read.table("data/성적.txt", header=TRUE));
pie(성적$국어, labels=paste(성적$성명, "-", 성적$국어),col=terrain.colors(10))
pie(성적$국어, clockwise=T, labels=paste(성적$성명, "-", 성적$국어),
col=rainbow(10))
pie(성적$국어, density=10, clockwise=T, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(click,labels=paste("-"), col=rainbow(20), clockwise=T, main="파이그래프 실습",
family="dog")
pie(as.matrix(click),labels=paste("-"), col=rainbow(20), clockwise=T, main="파이그래프 실습",
family="dog")
# 문제1
library(KoNLP)
movie
movie <- read.csv("output/movie_reviews3.csv")
movie
unlist(movie)
movie[4]
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie[4])
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_table
movie_sort <- sort(movie_table, decreasing = T)
movie_sort
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
movie_top10_df
#
movie <- read.csv("output/movie_reviews3.csv")
movie_review$vreview <- gsub("[ㄱ-ㅎㅏ-ㅣa-zA-Z[:punct:][:digit:]]", "", movie_review$vreview)
#
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review$vreview <- gsub("[ㄱ-ㅎㅏ-ㅣa-zA-Z[:punct:][:digit:]]", "", movie_review$vreview)
movie_review$vreview
word_data_noun <-sapply(movie_review$vreview, extractNoun)
word_table <-table(unlist(word_data_noun))
word_table2 <- sort(word_table, decreasing=T)
word_top10_df <- data.frame(head(word_table2, 10))
colnames(word_top10_df) <- c("wname", "wcount")
View(word_top10_df)
movie <- read.csv("output/movie_reviews3.csv")
movie$vreview
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie$vreview)
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
# 문제1 - 예시1
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review["vreview"])
movie_review.v
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review["vreview"])
movieReview.R1 <- gsub("[[:punct:][:digit:]ㄱ-ㅎㅏ-ㅣa-zA-Z]", "", movie_review.v)
movieReview.R1
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.interger(text_mining_result), 10)
text_mining_df <- data.frame(wname, wcount)
View(text_mining_df)
wcount <- head(as.interger(text_mining_result), 10)
wname <- head(names(text_mining_result), 10);
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.integer(text_mining_result), 10)
text_mining_df <- data.frame(wname, wcount)
View(text_mining_df)
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review["vreview"])
movieReview.R1 <- gsub("[[:punct:][:digit:]ㄱ-ㅎㅏ-ㅣa-zA-Z]", "", movie_review.v)
movieReview.R1
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.integer(text_mining_result), 10)
movie <- read.csv("output/movie_reviews3.csv")
movie[4]
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie[4])
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
movie <- read.csv("output/movie_reviews3.csv")
movie[[4]]
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie[[4]])
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
write.csv(movie_top10_df, "output/movie_top_word.csv")
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review[["vreview"]])
movieReview.R1 <- gsub("[[:punct:][:digit:]ㄱ-ㅎㅏ-ㅣa-zA-Z]", "", movie_review.v)
movieReview.R1
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.integer(text_mining_result), 10)
text_mining_df <- data.frame(wname, wcount)
View(text_mining_df)
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
dev.off()
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
성적$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
dev.off()
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
성적$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
grade$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445, browserName = "chrome")
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445, browserName = "chrome")
remDr$open()
getwd()
remDr$open()
remDr$open()
(grade <- read.table("data/성적.txt", header=TRUE))
favorite <- c('WINTER', 'SUMMER', 'SPRING', 'SUMMER', 'SUMMER',
'FALL', 'FALL', 'SUMMER', 'SPRING', 'SPRING')   # 자료 입력
favorite                            # favorite의 내용 출력
table(favorite)                     # 도수분포 계산
ds <- table(favorite)                      # 도수분포표 저장
ds
# 도수분포표 내용 확인
barplot(ds, main='favorite season')        # 막대그래프 작성
barplot(ds, main='favorite season',
col='blue')                   # 막대의 색 지정
barplot(ds, main='favorite season',
col=c('blue','red','green','yellow'))     # 막대의 색을 각각 지정
barplot(ds, main='favorite season',
col=rainbow(4))       # 레인보우 팔레트에서 4개의 색을 선택
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
library(KoNLP)
# 일부 패키지의 버전 문제로 업데이트 설치 요구함. 1번 선택하고 계속 진행할 것
useSejongDic()
1#Sys.getenv("JAVA_HOME")
SimplePos09("오늘 비가 내린다.") # 9가지 품사로 형태소 분석
extractNoun("오늘 비가 내린다.") # 명사만 추출
library(wordcloud)
# 워드 클라우드
install.packages("wordcloud")
install.packages("wordcloud2")
library(wordcloud)
library(wordcloud2)
(words <- read.csv("data/wc.csv"))
(words <- read.csv("data/wc.csv"))
library(wordcloud)
(words <- read.csv("data/wc.csv"))
(words <- read.csv("data/wc.csv"))
(words <- read.csv("data/wc.csv", encoding="UTF-8"))
(words <- read.csv("data/wc.csv",fileEncoding="CP949" encoding="UTF-8"))
(words <- read.csv("data/wc.csv", encoding="UTF-8"))
(words <- read.csv("data/wc.csv", header = TRUE, fileEncoding = "CP949", encoding="UTF-8"))
head(words)
?windowsFonts
windowsFonts(lett=windowsFont("휴먼옛체"))
wordcloud2(words,rotateRatio = 1)
wordcloud2(words,rotateRatio = 0.5)
wordcloud2(words,rotateRatio = 0)
wordcloud2(words,size=0.5,col="random-dark")
wordcloud2(words,size=0.7,col="random-light",backgroundColor = "black")
wordcloud2(data = demoFreq) # str(demoFreq)
wordcloud2(data = demoFreq, shape = 'diamond')
wordcloud2(data = demoFreq, shape = 'star')
wordcloud2(data = demoFreq, shape = 'cardioid')
wordcloud2(data = demoFreq, shape = 'triangle-forward')
wordcloud2(words, fontFamily = "휴먼옛체")
wordcloud(words$keyword, words$freq,
min.freq = 2,
random.order = F,
rot.per = 0.5, scale = c(4, 1),
colors = rainbow(20), family="lett")
windowsFonts(lett=windowsFont("휴먼옛체"))
windowsFonts(dog=windowsFont("THE개이득"))
wordcloud(words$keyword, words$freq)
wordcloud(words$keyword, words$freq,family="lett")
wordcloud(words$keyword, words$freq)
(words <- read.csv("data/wc.csv", header = TRUE, encoding="UTF-8"))
windowsFonts(dog=windowsFont("THE개이득"))
library(tidyverse)
library(showtext)
?windowsFonts
windowsFonts(lett=windowsFont("휴먼옛체"))
windowsFonts(lett=windowsFont("휴먼옛체"))
?windowsFonts
(words <- read.csv("data/wc.csv", header = TRUE, fileEncoding = "CP949", encoding="UTF-8"))
head(words)
?windowsFonts
windowsFonts(lett=windowsFont("휴먼옛체"))
wordcloud(words$keyword, words$freq,
min.freq = 2,
random.order = F,
rot.per = 0.5, scale = c(4, 1),
colors = rainbow(7))
wordcloud(words$keyword, words$freq,
min.freq = 2,
random.order = F,
rot.per = 0.5, scale = c(4, 1),
colors = rainbow(20), family="lett")
warning()
wordcloud2(words, fontFamily = "휴먼옛체")
wordcloud2(words,rotateRatio = 1)
wordcloud2(words,rotateRatio = 0.5)
wordcloud2(words,rotateRatio = 0)
wordcloud2(words,size=0.5,col="random-dark")
wordcloud2(words,size=0.7,col="random-light",backgroundColor = "black")
wordcloud2(data = demoFreq) # str(demoFreq)
wordcloud2(data = demoFreq, shape = 'diamond')
wordcloud2(data = demoFreq, shape = 'star')
wordcloud2(data = demoFreq, shape = 'cardioid')
wordcloud2(data = demoFreq, shape = 'triangle-forward')
wordcloud2(data = demoFreq, shape = 'triangle')
result<-wordcloud2(data = demoFreq, shape = 'pentagon')
library(htmlwidgets)
saveWidget(result,"output/tmpwc1.html",selfcontained = T) #오동작
saveWidget(result,"output/tmpwc2.html",selfcontained = F)
htmltools::save_html(result,"output/tmpwc3.html")
head(demoFreq)
str(demoFreq)
wordcloud(names(final),final)
wordcloud(names(final),final, min.freq = 1)
wordcloud2(final)
final <- sort(word_table2, decreasing = T)
word_data <- readLines("data/애국가(가사).txt")
word_data2 <- sapply(word_data, extractNoun, USE.NAMES = F)
word_data2
word_data3 <- extractNoun(word_data)
word_data3
add_words <- c("백두산", "남산", "철갑", "가을", "달")
buildDictionary(user_dic=data.frame(add_words, rep("ncn")), replace_usr_dic=T)
word_data3 <- extractNoun(word_data)
word_data3
# 한글 깨짐 해결
install.packages("extrafont")
library(extrafont)
font_import()
word_data2 <- sapply(word_data, extractNoun, USE.NAMES = F)
word_data2
word_data3 <- extractNoun(word_data)
word_data3
add_words <- c("백두산", "남산", "철갑", "가을", "달")
buildDictionary(user_dic=data.frame(add_words, rep("ncn")), replace_usr_dic=T)
word_data3 <- extractNoun(word_data)
word_data3
undata <- unlist(word_data3)
undata
word_table <- table(undata)
word_table
undata2 <- Filter(function(x) {nchar(x) >= 2}, undata)
word_table2 <- table(undata2)
word_table2
final <- sort(word_table2, decreasing = T)
head(final, 10)
extractNoun("대한민국의 영토는 한반도와 그 부속도서로 한다")
SimplePos09("대한민국의 영토는 한반도와 그 부속도서로 한다")
SimplePos22("대한민국의 영토는 한반도와 그 부속도서로 한다")
wordcloud(names(final),final)
wordcloud(names(final),final, min.freq = 1)
wordcloud2(final)
grade_index<- grade[3:5]
grade$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
(grade <- read.table("data/성적.txt", header=TRUE))
# 그래프의 작성
barplot(ds, main='인구 추정')
barplot(ds, main='인구 추정',
col=c('green','blue','yellow'))
# 그래프의 작성
barplot(ds, main='인구 추정')
barplot(ds, main='인구 추정',
col=c('green','blue','yellow'))
word_data <- readLines("data/애국가(가사).txt", na.strings=NA)
word_data <- readLines("data/애국가(가사).txt", encoding = "UTF-8")
word_data
word_data2 <- sapply(word_data, extractNoun, USE.NAMES = F)
word_data
word_data <- readLines("data/애국가(가사).txt")
word_data
Sys.getlocale()
Sys.setlocale("LC_ALL","C") # 강제 언어 삭제
data1 <- read.csv('.my_directory/example.csv', na.strings=NA, header = T, sep=",",encoding = "UTF-8") #file read 시, UTF-8로 인코딩
Sys.setlocale("LC_ALL","Korean") # 언어 다시 한글로
# 도수분포표 내용 확인
barplot(ds, main='favorite season')        # 막대그래프 작성
barplot(ds, main='favorite season',
col='blue')                   # 막대의 색 지정
barplot(ds, main='favorite season',
col=c('blue','red','green','yellow'))     # 막대의 색을 각각 지정
barplot(ds, main='favorite season',
col=rainbow(4))       # 레인보우 팔레트에서 4개의 색을 선택
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
barplot(ds, main='favorite season',
col='yellow',                          # 막대의 색을 지정
horiz=TRUE)                            # 세로 방향 출력
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
# 그래프의 작성
barplot(ds, main='인구 추정')
Sys.setlocale("LC_ALL","Korean") # 언어 다시 한글로
library("extrafont")
font_import()
library(ggplot2)
theme_set(theme_grey(base_family='휴먼옛체'))
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
font()
fonts()
library(showtaxt)
library(tidyverse)
library(showtaxt)
library(showtext)
showtext_auto()
install.packages("showtext")
library(showtext)
font_add_google('Nanum Gothic', family='NanumGothic')
showtext_auto()
fonts()
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
showtext_auto()
wordcloud2(words, fontFamily = "휴먼옛체")
library(wordcloud)
library(wordcloud2)
library(wordcloud)
windowsFonts(lett=windowsFont("휴먼옛체"))
windowsFonts(dog=windowsFont("THE개이득"))
wordcloud(words$keyword, words$freq)
wordcloud(words$keyword, words$freq,family="lett")
wordcloud(words$keyword, words$freq,family="dog")
wordcloud(words$keyword, words$freq,
min.freq = 2,
random.order = F,
rot.per = 0.5, scale = c(4, 1),
colors = rainbow(7))
wordcloud(words$keyword, words$freq,
min.freq = 2,
random.order = F,
rot.per = 0.5, scale = c(4, 1),
colors = rainbow(20), family="lett")
wordcloud2(words, fontFamily = "휴먼옛체")
wordcloud2(words,rotateRatio = 1)
wordcloud2(words,rotateRatio = 0.5)
wordcloud2(words,rotateRatio = 0)
wordcloud2(words,size=0.5,col="random-dark")
wordcloud2(words,size=0.7,col="random-light",backgroundColor = "black")
wordcloud2(data = demoFreq) # str(demoFreq)
wordcloud2(data = demoFreq, shape = 'diamond')
wordcloud2(data = demoFreq, shape = 'star')
wordcloud2(data = demoFreq, shape = 'cardioid')
wordcloud2(data = demoFreq, shape = 'triangle-forward')
wordcloud2(data = demoFreq, shape = 'triangle')
# 네이버 블로그 글 워드클라우드
library(XML)
library(httr)
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode("봄")
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- xmlParse(doc, encoding="UTF-8")
spring <- xpathSApply(doc2, "//item/description", xmlValue)
spring <- gsub("</?b>", "", spring)
spring <- gsub("&[a-z];", "", spring)
spring
install.packages("tidyverse")
library(tidyverse)
# [ 예제3 ]
# 단일 페이지(rvest 패키지 사용)
library(rvest)
require(rvest)
repair_encoding(text)
guess_encoding(text)
SimplePos09("오늘 비가 내린다.") # 9가지 품사로 형태소 분석
library(KoNLP)
SimplePos09("오늘 비가 내린다.") # 9가지 품사로 형태소 분석
word_data <- readLines("data/애국가(가사).txt")
word_data
repair_encoding(readLines("data/애국가(가사).txt"), from = "UTF-8")
barplot(ds, main='favorite season',
col='green',                           # 막대의 색을 지정
xlab='계절',                           # x축 설명
ylab='빈도수' )                        # y축 설명
barplot(ds, main='인구 추정',
col=c('green','blue','yellow'))
library(extrafont)
font_import()
fonts()
library(ggplot2)
theme_set(theme_grey(base_family='휴먼옛체'))
word_data <- readLines("data/애국가(가사).txt")
word_data
