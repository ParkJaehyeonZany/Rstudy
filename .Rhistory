map = kormap2,        # 지도 데이터
palette="Set3",       # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = korpop3,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap3,        # 지도 데이터
palette="YlGnBu",     # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
rm(korpop1, korpop2, korpop3)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop1$name <- iconv(korpop1$name, "UTF-8","CP949")
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop2$name <- iconv(korpop2$name, "UTF-8","CP949")
korpop3 <- rename(korpop3,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop3$name <- iconv(korpop3$name, "UTF-8","CP949")
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
seoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
seoulmap <- kormap2 %>% filter(startsWith(as.character(code), '11'))
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
korpop2
korpop2$name
library(dplyr)
one <- read.csv("data/one.csv")
library(dplyr)
one <- read.csv("data/one.csv")
one <- read.csv("data/one.csv", fileEncoding = "euc-kr")
one
head(one)
head(seoulpop)
one <- one %>% group_by(구별) %>%  summarise(구별1인가구=sum(X1인가구))
sort(unique(one$구별))
sort(seoulpop$name)
seoulpop$name <- trimws(seoulpop$name)
seoulpop$name
seoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
korpop2
library(kormaps2014)
library(dplyr)
# 시군구
class(korpop2)
head(korpop2)
head(kormap2)
sort(seoulpop$name)
seoulpop$name <- trimws(seoulpop$name)
oneseoulpop <- inner_join(seoulpop,  one, by = c("name"="구별"))
head(oneseoulpop)
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
library(ggiraphExtra)
library(tibble)
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
library(dplyr)
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
library(ggmap)
register_google(key='AIzaSyDy81EbO46BRSnX1DOgg_F84bhsdbku2z4')
source("~/pjh/Rexam/day16.R", echo=TRUE)
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
rm(korpop1, korpop2, korpop3)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
(korpop1$name, "UTF-8","CP949")
rm(korpop1, korpop2, korpop3)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop3 <- rename(korpop3,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggplot(korpop1,aes(map_id=code, fill=pop))+
geom_map(map = kormap1, colour="black",size=0.1)+
expand_limits(x= kormap1$long,y = kormap1$lat)+
scale_fill_gradientn(colours = c('white','orange','red'))+
ggtitle('2014년도 시도별 인구분포도')+coord_map()
ggplot(korpop2,aes(map_id=code, fill=pop))+
geom_map(map = kormap2, colour="black",size=0.1)+
expand_limits(x= kormap2$long,y = kormap2$lat)+
scale_fill_gradientn(colours = c('#e6e6ff', 'blue', 'darkblue'))+
ggtitle('2014년도 시군구별 인구분포도')+coord_map()
ggplot(korpop3,aes(map_id=code, fill=pop))+
geom_map(map = kormap3, colour="black",size=0.1)+
expand_limits(x= kormap3$long,y = kormap3$lat)+
scale_fill_gradientn(colours = c('white','orange','red'))+
ggtitle('2014년도 읍면동별 인구분포도')+coord_map()
seoulmap <- kormap2 %>% filter(startsWith(as.character(code), '11'))
seoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
ggplot(seoulpop,aes(map_id=code, fill=pop))+
geom_map(map = seoulmap, colour="black",size=0.1)+
expand_limits(x= seoulmap$long,y = seoulmap$lat)+
scale_fill_gradientn(colours = rainbow(7))+
ggtitle('2014년도 서울시 구별 인구분포도')+coord_map()
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
palette="RdBu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = korpop2,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap2,        # 지도 데이터
palette="Set3",       # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = korpop3,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap3,        # 지도 데이터
palette="YlGnBu",     # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = seoulpop,      # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="RdPu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
one <- read.csv("data/one.csv", fileEncoding = "euc-kr")
head(one)
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
one <- one %>% group_by(구별) %>%  summarise(구별1인가구=sum(X1인가구))
sort(unique(one$구별))
sort(seoulpop$name)
seoulpop$name <- trimws(seoulpop$name)
oneseoulpop <- inner_join(seoulpop,  one, by = c("name"="구별"))
head(oneseoulpop)
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
library(leaflet)
leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map %>% addTiles()
geocode(enc2utf8("창밀로 3530"), source = "google")
geocode("seoul", source = "google")
library(dplyr)
library(ggmap)
library(ggplot2)
geocode('Seoul', source = 'google')
geocode('Seoul', source = 'google', output = 'latlona')
geocode(enc2utf8('서울'), source = 'google')
geocode(enc2utf8('서울'), source = 'google', output = 'latlona')
geocode(enc2utf8('서울&language=ko'), source = 'google', output = 'latlona')
station_list = c('시청역', '을지로입구역', '을지로3가역', '을지로4가역',
'동대문역사문화공원역', '신당역', '상왕십리역', '왕십리역', '한양대역',
'뚝섬역', '성수역', '건대입구역', '구의역', '강변역', '잠실나루역',
'잠실역', '신천역', '종합운동장역', '삼성역', '선릉역', '역삼역',
'강남역', '2호선 교대역', '서초역', '방배역', '사당역', '낙성대역',
'서울대입구역', '봉천역', '신림역', '신대방역', '구로디지털단지역',
'대림역', '신도림역', '문래역', '영등포구청역', '당산역', '합정역',
'홍대입구역', '신촌역', '이대역', '아현역', '충정로역')
station_df = data.frame(station_list)
station_df$station_list = enc2utf8(station_df$station_list)
station_lonlat
seoul_lonlat = unlist(geocode('seoul', source = 'google'))
qmap('seoul', zoom = 11)
qmap(seoul_lonlat, zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map <- qmap('Seoul', zoom = 11, source = 'stamen', maptype = 'toner')
seoul_map + geom_point(data = station_lonlat, aes(x = lon, y = lat), colour = 'green',
size = 4)
enc2utf8("강남구 삼성동 151-7")
geocode("seoul")
mk <- data.frame(lon=lon, lat=lat)
mk
geocode(mk, source = "google")
geocode(enc2utf8("강남구 삼성동 151-7"), source = "google")
library(ggmap)
register_google(key='AIzaSyDy81EbO46BRSnX1DOgg_F84bhsdbku2z4')
geocode(enc2utf8("강남구 삼성동 151-7"), source = "google")
geocode(enc2utf8("밀양시 창밀로 3530"), source = "google")
library(tidyr)
library(dplyr)
library(ggplot2)
library(tm)
library(proxy)
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
### 문제1
grade <- read.csv("data/성적2.csv")
### 문제1
grade <- read.csv("data/성적2.csv", fileEncoding="euc-kr")
### 문제1
grade <- read.csv("data/성적2.csv", header=T, sep=",")
### 문제1
grade <- read.csv("data/성적2.csv", header=T, sep=" ")
# 그림1
View(grade)
### 문제1
grade <- read.csv("data/성적2.csv", header=T, sep=",")
read.csv
### 문제1
grade <- read.table("data/성적2.csv")
# 그림1
View(grade)
### 문제1
grade <- read.table("data/성적2.csv", header=T, sep=",")
### 문제1
grade <- read.table("data/성적2.csv", header=F, sep=",")
### 문제1
grade <- read.csv("data/성적2.csv", header=F, sep=",")
# 그림1
View(grade)
### 문제1
grade <- read.csv("data/성적2.csv", header=T, sep=",")
### 문제1
grade <- read.csv("data/성적2.csv")
### 문제1
grade <- read.csv("data/성적2.csv")
# 그림1
View(grade)
### 문제1
grade <- read.csv("data/성적2.csv")
### 문제1
grade <- read.csv("data/성적2.csv")
### 문제1
grade <- read.csv("data/성적2.csv", header=T, sep=",")
### 문제1
grade <- read.csv("data/성적2.csv", header=T, sep=",", encoding = "UTF-8")
### 문제1
grade <- read.csv("data/성적2.csv")
### 문제1
grade <- read.csv("data/성적2.csv")
# 그림1
View(grade)
### 문제1
grade <- read.csv("data/성적2.csv")
# 그림1
View(grade)
# 그림2
png("output/result1-2.png", width=960, height=540)
boxplot(grade$국어, grade$수학, range=1)$stat # boxplot(grande[,c(3:4)], range=1)$stat
dev.off()
boxplot(grade$국어, grade$수학, range=1)$stat # boxplot(grande[,c(3:4)], range=1)$stat
# 그림3
grade$수학 <- ifelse(grade$수학 > 10, as.integer(mean(grade$수학, na.rm = T)), grade$수학)
View(grade)
# 그림4
grade %>% fill(국어, .direction="updown") %>% fill(수학, .direction="updown")
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) # Warning message : 데이터 삭제 됨.
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=성명)) # Warning message : 데이터 삭제 됨.
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) + labs(fill="Size")# Warning message : 데이터 삭제 됨.
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) # Warning message : 데이터 삭제 됨.
### 문제2
data <- read.csv("data/reshapedata.csv")
View(data)
# 1
longdata <- data %>% gather(key="exam", value="jumsu", math.mid:eng.final)
View(longdata)
듀크 <- c("사과 포도 망고")
둘리 <- c("포도 자몽 자두")
또치 <- c("복숭아 사과 포도")
도우너 <- c("오렌지 바나나 복숭아")
길동 <- c("포도 바나나 망고")
희동 <- c("포도 귤 오렌지")
students <- c(듀크, 둘리, 또치, 도우너, 길동, 희동)
# 1
st_cps <- VCorpus(VectorSource(students))
st_tdm <- TermDocumentMatrix(st_cps, control=list(wordLengths = c(1, Inf)))
# names(st_tdm) <- c("듀크","둘리","또치","도우너","길동","희동")
inspect(st_tdm)
(st_m <- as.matrix(st_tdm))
# names(st_m) <- c("듀크","둘리","또치","도우너","길동","희동")
(st_v <- sort(rowSums(st_m), decreasing=T))
mystopwords <- readLines("data/stopwords_ko.txt", encoding="UTF-8")
text <- readLines("data/stopwords_testdata.txt", encoding="UTF-8")
mystopwords
text
docs <- VCorpus(VectorSource(text))
VectorSource(text)
VCorpus(VectorSource(text))
docs <- VCorpus(VectorSource(text))
inspect(docs)
inspect(docs)
docs <- tm_map(docs, removePunctuation)
inspect(docs)
docs <- tm_map(docs, removeWords, mystopwords)
docs
inspect(docs)
tdm <- TermDocumentMatrix(docs, control=list(wordLengths = c(1, Inf)))
as.matrix(tdm)
docs2 <- VCorpus(VectorSource(text))
tdm1 <- TermDocumentMatrix(docs2, control=list(wordLengths = c(1, Inf)))
as.matrix(tdm1)
tdm2 <- TermDocumentMatrix(docs2, control=list(
removePunctuation = T,
removeNumbers = T,
wordLengths = c(1, Inf),
stopwords=mystopwords))
as.matrix(tdm2)
# 1
st_cps <- VCorpus(VectorSource(students))
st_cps
st_tdm
# names(st_tdm) <- c("듀크","둘리","또치","도우너","길동","희동")
inspect(st_tdm)
### 문제3
survey_fruit <- c("사과 포도 망고",
"포도 자몽 자두",
"복숭아 사과 포도",
"오렌지 바나나 복숭아",
"포도 바나나 망고",
"포도 귤 오렌지")
survey_fruit
#1.
corpus <- VCorpus(VectorSource(survey_fruit))
dtm <- DocumentTermMatrix(corpus, control=list(wordLengths = c(1, Inf)))
(m <- as.matrix(dtm))
row.names(m) <- c("듀크", "둘리", "또치", "도우너", "길동", "희동")
docscom <- m %*% t(m)
# 듀크-또치, 듀크-길동
docscom
col.names(st_m) <- c("듀크","둘리","또치","도우너","길동","희동")
names(st_m) <- c("듀크","둘리","또치","도우너","길동","희동")
st_m
(st_m <- as.matrix(st_tdm))
(st_v <- sort(rowSums(st_m), decreasing=T))
docscom <- m %*% t(m)
# 듀크-또치, 듀크-길동
docscom
dist(docscom, method="cosine")
t(st_m)
(m <- as.matrix(dtm))
# 유사도 거리(코사인, 유클리디언)
dist(partnercom, method = "cosine")
dist(partnercom, method = "Euclidean")
# 거리로 구하는 함수
dist(doccom, method = "cosine")
docscom <- m %*% t(st_m)
docscom <- st_m %*% t(st_m)
dist(st_m, method="cosine")
dist(docscom, method="cosine")
docscom <- m %*% t(m)
# 듀크-또치, 듀크-길동
docscom
dist(docscom, method="cosine")
st_m <- t(st_m)
row.names(st_m) <- c("듀크","둘리","또치","도우너","길동","희동")
docscom <- st_m %*% t(st_m)
dist(docscom, method="cosine")
### 문제2
data <- read.csv("data/reshapedata.csv")
View(data)
# 1
longdata <- data %>% gather(key="exam", value="jumsu", math.mid:eng.final)
View(longdata)
# 2
widedata <- longdata %>% spread(key="exam", value="jumsu")
View(widedata)
# 3
result <- longdata %>%
separate(col="exam",
into=c("subname","subnum"))
result
View(result)
# 3
result <- longdata %>%
separate(col="exam",
into=c("subname","subnum"))
View(result)
# 3
result <- longdata %>%
separate(col="exam",
into=c("subname","subnum"),
sep="\\.")
View(result)
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) ### Warning message : 결측값이 였던 데이터 삭제 됨.
ggsave("output/result1-5.png", dpi=100)
# 그림4
grade <- grade %>%
fill(국어, .direction = "updown") %>%
fill(수학, .direction = "updown")
# 그림5
ggplot(grade,aes(국어, 수학)) +
geom_point(size=3, aes(fill="3", color=성명)) +
labs(fill="Size")
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) ### Warning message : 결측값이 였던 데이터 삭제 됨.
# 그림3
grade$수학 <- ifelse(grade$수학 > 10, as.integer(mean(grade$수학, na.rm = T)), grade$수학)
### 문제1
grade <- read.csv("data/성적2.csv")
boxplot(grade$국어, grade$수학, range=1)$stat # boxplot(grande[,c(3:4)], range=1)$stat
# 그림3
grade$수학 <- ifelse(grade$수학 > 10, as.integer(mean(grade$수학, na.rm = T)), grade$수학)
# 그림4
grade %>% fill(국어, .direction="updown") %>% fill(수학, .direction="updown")
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) ### Warning message : 결측값이 였던 데이터 삭제 됨.
(st_m <- as.matrix(st_tdm))
colnames(st_m) <- c("듀크","둘리","또치","도우너","길동","희동")
st_m
docscom <- st_m %*% t(st_m)
dist(docscom, method="cosine")
dist(docscom, method="cosine")
docscom <- t(st_m) %*% st_m
dist(docscom, method="cosine")
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) ### Warning message : 결측값이 였던 데이터 삭제 됨.
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) + theme_bw() ### Warning message : 결측값이 였던 데이터 삭제 됨.
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) ### Warning message : 결측값이 였던 데이터 삭제 됨.
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명)))
# 그림5
ggplot(grade, aes(국어, 수학)) + geom_point(size=3, aes(color=factor(성명))) + coord_cartesian(xlim=c(0,10), ylim=c(0,10)) ### Warning message : 결측값이 였던 데이터 삭제 됨.
