v1 <- 1:10
v1*10
LETTERS
print(LETTERS)
V1 > 5
V1>5
V1 > 5
v1 > 5
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4445, browserName = "chrome")
remDr$open()
(성적 <- read.table("data/성적.txt", header=TRUE))
setwd("c:/pjh/Rexam")
(성적 <- read.table("data/성적.txt", header=TRUE))
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
str(성적1)
# 학생의 각 과목에 대한 각각의 점수에 대한 그래프
성적1<- 성적[3:5]
str(성적1)
par(mar=c(5,5,5,5), mfrow=c(1,1))
barplot(as.matrix(성적1), main="성적그래프", beside=T,
ylab="점수", col=rainbow(10), family="cat")
barplot(as.matrix(성적1), main="성적그래프", ylab="점수",
col=rainbow(10))
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3))
# 학생의 각 과목에 대한 합계 점수에 대한 그래프
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
legend(11,30, names(성적1), cex=0.8, fill=rainbow(3));
# 학생의 각 과목에 대한 합계 점수에 대한 그래프
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3))
par(mar=c(5,5,5,5), mfrow=c(1,1))
# 학생의 각 과목에 대한 합계 점수에 대한 그래프
xname <- 성적$학번;    #  x축 레이블용 벡터
par(xpd=T, mar=par()$mar+c(0,0,0,4));   # 우측에 범례가 들어갈 여백을 확보
barplot(t(성적1), main="성적그래프", ylab="점수", col=rainbow(3), space=0.1, cex.axis=0.8, names.arg=xname, cex=0.8)
barplot(t(성적1),
names.arg=xname,
col=c('orange','skyblue','pink'),
family="dog")
(성적 <- read.table("data/성적.txt", header=TRUE))
성적1<- 성적[3:5]
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(성적1), cex=0.8, fill=c('orange','skyblue','pink'))
(성적 <- read.table("data/성적.txt", header=TRUE))
warning()
warning(26)
(성적 <- read.table("data/성적.txt", header=TRUE))
성적1<- 성적[3:5]
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
warning(12)
warning(25)
warning(12)
(성적 <- read.table("data/성적.txt", header=TRUE))
성적1<- 성적[3:5]
barplot(t(성적1),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(성적1), cex=0.8, fill=c('orange','skyblue','pink'))
data.table(click)
click <- read.table("data/product_click.log", header=TRUE)
data.table(click)
table(click)
t(click)
t(table(click))
barplot(as.matrix(click), main="세로바 그래프 실습", beside=T, ylab="클릭수", xlab="상품ID", col=terrain.colors(10), family="dog")
barplot(as.matrix(click), main="세로바 그래프 실습")
barplot(as.matrix(click), main="세로바 그래프 실습", ylab="클릭수", xlab="상품ID", col=terrain.colors(10), family="dog")
# 파이그래프
(성적 <- read.table("data/성적.txt", header=TRUE));
pie(성적$국어, labels=paste(성적$성명, "-", 성적$국어),col=terrain.colors(10))
pie(성적$국어, clockwise=T, labels=paste(성적$성명, "-", 성적$국어),
col=rainbow(10))
pie(성적$국어, density=10, clockwise=T, labels=paste(성적$성명, "-", 성적$국어), col=rainbow(10))
pie(click,labels=paste("-"), col=rainbow(20), clockwise=T, main="파이그래프 실습",
family="dog")
pie(as.matrix(click),labels=paste("-"), col=rainbow(20), clockwise=T, main="파이그래프 실습",
family="dog")
# 문제1
library(KoNLP)
movie
movie <- read.csv("output/movie_reviews3.csv")
movie
unlist(movie)
movie[4]
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie[4])
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_table
movie_sort <- sort(movie_table, decreasing = T)
movie_sort
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
movie_top10_df
#
movie <- read.csv("output/movie_reviews3.csv")
movie_review$vreview <- gsub("[ㄱ-ㅎㅏ-ㅣa-zA-Z[:punct:][:digit:]]", "", movie_review$vreview)
#
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review$vreview <- gsub("[ㄱ-ㅎㅏ-ㅣa-zA-Z[:punct:][:digit:]]", "", movie_review$vreview)
movie_review$vreview
word_data_noun <-sapply(movie_review$vreview, extractNoun)
word_table <-table(unlist(word_data_noun))
word_table2 <- sort(word_table, decreasing=T)
word_top10_df <- data.frame(head(word_table2, 10))
colnames(word_top10_df) <- c("wname", "wcount")
View(word_top10_df)
movie <- read.csv("output/movie_reviews3.csv")
movie$vreview
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie$vreview)
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
# 문제1 - 예시1
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review["vreview"])
movie_review.v
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review["vreview"])
movieReview.R1 <- gsub("[[:punct:][:digit:]ㄱ-ㅎㅏ-ㅣa-zA-Z]", "", movie_review.v)
movieReview.R1
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.interger(text_mining_result), 10)
text_mining_df <- data.frame(wname, wcount)
View(text_mining_df)
wcount <- head(as.interger(text_mining_result), 10)
wname <- head(names(text_mining_result), 10);
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.integer(text_mining_result), 10)
text_mining_df <- data.frame(wname, wcount)
View(text_mining_df)
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review["vreview"])
movieReview.R1 <- gsub("[[:punct:][:digit:]ㄱ-ㅎㅏ-ㅣa-zA-Z]", "", movie_review.v)
movieReview.R1
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.integer(text_mining_result), 10)
movie <- read.csv("output/movie_reviews3.csv")
movie[4]
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie[4])
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
movie <- read.csv("output/movie_reviews3.csv")
movie[[4]]
movie_gsub <- gsub("[[:punct:][:digit:]A-Za-zㄱ-ㅎㅏ-ㅣ]","", movie[[4]])
movie_gsub
movie_noun <- sapply(movie_gsub, extractNoun)
movie_table <- table(unlist(movie_noun))
movie_sort <- sort(movie_table, decreasing = T)
movie_top10_df <- data.frame(head(movie_sort, 10))
colnames(movie_top10_df) <- c("wname","wcount")
View(movie_top10_df)
write.csv(movie_top10_df, "output/movie_top_word.csv")
movie_review <- read.csv("output/movie_reviews3.csv")
movie_review.v <- as.vector(movie_review[["vreview"]])
movieReview.R1 <- gsub("[[:punct:][:digit:]ㄱ-ㅎㅏ-ㅣa-zA-Z]", "", movie_review.v)
movieReview.R1
text_mining <- extractNoun(movieReview.R1)
un_text_mining <- unlist(text_mining) # unlist 왜 하는것인가
text_mining_word <- table(un_text_mining)
text_mining_result <- sort(text_mining_word, decreasing=T)
wname <- head(names(text_mining_result), 10);
str(wname)
wcount <- head(as.integer(text_mining_result), 10)
text_mining_df <- data.frame(wname, wcount)
View(text_mining_df)
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
dev.off()
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
성적$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
dev.off()
(grade <- read.table("data/성적.txt", header=TRUE))
grade_index<- grade[3:5]
성적$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
grade$성명 <- c('길동', '둘리', '또치', '도우너', '희동', '듀크', '턱시', '토토로', '올라프', '우디')
row.names(grade_index) <- grade$성명
barplot(t(grade_index),
col=c('orange','skyblue','pink'),
family="dog")
title(main="학생별 점수", family="dog", col.main="orange")
legend(11,30, names(grade_index), cex=0.8, fill=c('orange','skyblue','pink'))
