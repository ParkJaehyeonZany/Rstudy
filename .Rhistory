lon=gc$lon,
lat=gc$lat)
cen <- c(mean(df$lon),mean(df$lat)) # 중요
map <- get_googlemap(center=cen,
maptype="roadmap",
zoom=10,
size=c(800,640),
marker=gc)
ggmap(map)
library(dplyr)
library(dplyr)
library(ggmap)
library(ggplot2)
library(leaflet)
library(dplyr)
library(ggmap)
library(ggiraphExtra)
library(tibble)
library(ggplot2)
# 뭔가 설치를 요구함 -> 1번 선택
states_map <- map_data("state") # 데이터 설치 프롬프트함 -> 1번 선택
str(states_map)
# mapproj 패키지 설치를 요구함 -> 1번 선택
ggChoropleth(data = crime,         # 지도에 표현할 데이터
aes(fill = Murder,    # 색깔로 표현할 변수
map_id = state),  # 지역 기준 변수
map = states_map)     # 지도 데이터
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
palette="RdBu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
library(kormaps2014)
library(dplyr)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
palette="RdBu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
myseoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
myseoulpop
kormap2
head(kormap2)
### 문제2
# 1.
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
library(leaflet)
library(dplyr)
library(ggmap)
library(htmlwidgets)
### 문제2
# 1.
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
# 1
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
# 문제2
library(kormaps2014)
# 1
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
rm(korpop1, korpop2, korpop3)
# 1
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
seoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
head(korpop2)
head(seoulpop)
code
seoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
as.character(code)
starts
# 결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
outlier
# 결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
seoulpop
seoulpop <- korpop2
seoulpop
# 2
seoulpop <- rename(seoulpop, 외국인수="외국인_계_명")
head(seoulpop)
# 3
seoulpop$외국인수 <- as.numeric(seoulpop$외국인수)
head(seoulpop)
# 2.
seoulpop <- seoulpop %>% rename(외국인수="외국인_계_명")
seoulpop %>% head
seoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
# 2.
seoulpop <- seoulpop %>% rename(외국인수="외국인_계_명")
# 3.
seoulpop <- seoulpop %>% mutate_at("외국인수", as.numeric)
seoulpop %>% head
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
palette="RdBu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
rm(korpop1, korpop2, korpop3)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
korpop3 <- rename(korpop3,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
palette="RdBu",       # 칼라 팔레트
interactive = T)      # 인터랙티브
ggChoropleth(data = oneseoulpop,   # 지도에 표현할 데이터
aes(fill = 구별1인가구,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,        # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
# 4
ggChoropleth(data = myseoulpop,    # 지도에 표현할 데이터
aes(fill = 외국인수,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = myseoulmap,     # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
# 1
korpop2 <- rename(korpop2,
pop = 총인구_명,
name = 행정구역별_읍면동)
myseoulpop <- korpop2 %>% filter(startsWith(as.character(code), '11'))
# 2
myseoulpop <- rename(myseoulpop, 외국인수="외국인_계_명")
# 3
myseoulpop$외국인수 <- as.numeric(myseoulpop$외국인수)
# 4
ggChoropleth(data = myseoulpop,    # 지도에 표현할 데이터
aes(fill = 외국인수,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = myseoulmap,     # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
# 4
ggChoropleth(data = myseoulpop,    # 지도에 표현할 데이터
aes(fill = 외국인수,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,     # 지도 데이터
palette="YlOrRd",     # 칼라 팔레트
interactive = T)      # 인터랙티브
# 4
ggChoropleth(data = myseoulpop,    # 지도에 표현할 데이터
aes(fill = 외국인수,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="Purples",     # 칼라 팔레트
interactive = T)      # 인터랙티브
saveWidget(widget=foreigner, file="output/lab19_2.html")
# 4
foreigner <- ggChoropleth(data = myseoulpop,    # 지도에 표현할 데이터
aes(fill = 외국인수,  # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = seoulmap,       # 지도 데이터
palette="Purples",    # 칼라 팔레트
interactive = T)      # 인터랙티브
saveWidget(widget=foreigner, file="output/lab19_2.html")
saveWidget(widget=map, file="output/lab19_1.html")
home <- geocode(enc2utf8("밀양시 창밀로 3530"), source = "google")
msg <- "<strong>Zany</strong>"
map <- leaflet() %>%
setView(lng = home$lon, lat = home$lat, zoom = 16) %>%
addTiles() %>%
addCircles(lng=home$lon, lat=home$lat, color="green", opacity=0.7, weight=7, popup=msg)
saveWidget(widget=map, file="output/lab19_1.html")
iris.mean <- mean(iris$Sepal.Width)           # 평균
iris.sd <- sd(iris$Sepal.Width)               # 표준편차
iris.quan <- quantile(iris$Sepal.Width, 0.30) # 3분위수
iris.quan
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
library(fmsb)
### 문제2
library(ggplot2)
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.5) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.5) +
ggtitle('꽃받침 너비')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 1) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.1) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.3) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.2) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.25) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.1) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.15) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.3) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.25) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.28) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.26) +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
ggplot(iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth = 0.3,position='dodge') +
ggtitle('꽃받침 너비') +
theme(legend.position='top')
# 2
hist(iris$Sepal.Width)
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency")
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency", freq=F)
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency")
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency", main="꽃받침 너비",
nclass=24)
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency", main="꽃받침 너비",
)
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency", main="꽃받침 너비",
family="dog")
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency", main="꽃받침 너비",
family="maple")
data("Forbes2000")
ds <- Forbes2000
ds[!complete.cases(ds),]          # 결측값 확인
library(HSAUR)
data("Forbes2000")
# [ stats 패키지 : aggreate() ]
# aggregate(data, by = '기준이 되는 컬럼', FUN)
# 특정 컬럼을 기준으로 데이터들을 그루핑해서 FUN 에 전달된 함수 호출
agg <- aggregate(iris[,-5], by=list(iris$Species),
FUN=mean)
agg
# 3
aggregate(iris$Sepal.Width, by=list(iris$Species), FUN=min())
# 3
aggregate(iris$Sepal.Width, by=list(iris$Species), FUN=min)
# 3
aggregate(iris$Sepal.Width, FUN=min)
# 3
aggregate(iris$Sepal.Width, by=list(iris$Species), FUN=min)
# 1
head(iris)
# [ stats 패키지 : aggreate() ]
# aggregate(data, by = '기준이 되는 컬럼', FUN)
# 특정 컬럼을 기준으로 데이터들을 그루핑해서 FUN 에 전달된 함수 호출
agg <- aggregate(iris[,-5], by=list(iris$Species),
FUN=mean)
agg
# 4
agg.min <- aggregate(iris$Sepal.Width, by=list(iris$Species), FUN=min)
agg.max <- aggregate(iris$Sepal.Width, by=list(iris$Species), FUN=max)
agg.min
agg.max - agg.min
# 4
agg.min <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=min)
agg.min
agg.max$x - agg.min$x
# 4
agg.min <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=min, FUN=max)
class(agg.max)
merge(agg.max, agg.min, by=Species)
merge(agg.max, agg.min, by="Species")
# 4
agg.min <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=min)
agg.max <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=max)
merge(agg.max, agg.min, by=Species)
merge(agg.max, agg.min, by="Species")
agg.min
agg.max
agg.min <- rename(agg.min, min="x")
agg.min
agg.max <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=max)
agg.max <- rename(agg.max, max="x")
merge(agg.max, agg.min, by="Species")
agg.sw <- merge(agg.max, agg.min, by="Species")
agg.sw <- mutate(agg.sw, x=|min-max|)
agg.sw <- mutate(agg.sw, x=max-min)
agg.sw
sort(agg.sw$x)
order(agg.sw$x, decreasing=F)
order(agg.sw$x, decreasing=T)
name(order(agg.sw$x, decreasing=T))
names(order(agg.sw$x, decreasing=T)[1])
names(sort(agg.sw$x, decreasing=T)[1])
# 2
names(sort(rowSums(st_m), decreasing=T)[1])
st_m
rowSums(st_m)
sort(rowSums(st_m)
sort(rowSums(st_m), decreasing=T)[1]
sort(agg.sw$x, decreasing=T)[1]
sort(agg.sw$x, decreasing=T)
order(agg.sw$x, decreasing=T)
agg.sw <- mutate(agg.sw, x=max-min)
agg.sw
# NA를 포함하는 test 데이터 생성
x <- iris
x[1,2]<- NA; x[1,3]<- NA
x[2,3]<- NA; x[3,4]<- NA
head(x)
# for를 이용한 방법
for (i in 1:ncol(x)) {
this.na <- is.na(x[,i])
cat(colnames(x)[i], '\t', sum(this.na), '\n')
}
# apply를 이용한 방법
col_na <- function(y) {
return(sum(is.na(y)))
}
na_count <-apply(x, 2, FUN=col_na)
na_count
# order(agg.sw$x, decreasing=T)
# 5
test <- iris %>% filter(Species=="viginica")
test
# order(agg.sw$x, decreasing=T)
# 5
test <- iris %>% filter(Species=="virginica")
test
order(agg.sw$x, decreasing=T)
# 5
test <- iris %>% filter(Species=="virginica")
order(agg.sw$x, decreasing=T)[1]
agg.sw[o]
o <- order(agg.sw$x, decreasing=T)[1]
agg.sw[o]
agg.sw[,o]
o
agg.sw
agg.sw[o,]
agg.sw[o,1]
agg.sw[o,]
# 5
test <- iris %>% filter(Species=="virginica")
# 5
(test <- iris %>% filter(Species=="virginica"))
iris
head(test)
# 5
test <- iris %>% filter(Species=="virginica",1:4)
# 5
test <- iris %>% filter(Sepal.Length~Petal.Width, Species=="virginica")
# 5
test <- iris %>% filter(Sepal.Length:Petal.Width, Species=="virginica")
head(test)
# 5
test <- iris %>% filter(Sepal.Length:Petal.Width, Species=="virginica")
head(test)
# 5
test <- iris %>% filter(Species=="virginica")
head(test)
test[,]
test[,-5]
# 5
test <- iris %>% filter(Species=="virginica")[,-5]
test <- test[,-5]
# 5
test <- iris %>% filter(Species=="virginica")
test <- test[,-5]
head(test)
# 6
cor(test)
# 6
cor(test)
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
library(fmsb)
stats <- read.csv("data/picher_stats_2017.csv")
# 문제1
player <- stats[107,c(3,4,11,12,13)]
max.stats <- rep(100,5)
min.stats <- rep(0,5)
player.stats <- data.frame(rbind(max.stats, min.stats, player))
colnames(player.stats) <- c("승","패","삼진","볼넷","홈런")
radarchart(player.stats)
radarchart(player.stats,                           # 데이터프레임
pcol='dark green',            # 다각형 선의 색
pfcol=rgb(0.2,0.5,0.5,0.5),   # 다각형 내부 색
plwd=3,                       # 다각형 선의 두께
cglcol='grey',                # 거미줄의 색
cglty=1,                      # 거미줄의 타입
cglwd=0.8,                    # 거미줄의 두께
axistype=1,                   # 축의 레이블 타입
seg=4,                        # 축의 눈금 분할
axislabcol='grey',            # 축의 레이블 색
caxislabels=seq(0,100,25),    # 축의 레이블 값
title='강윤구 선수의 성적',
family="dog"
)
### 문제2
library(ggplot2)
iris
# 1
head(iris)
iris.mean <- mean(iris$Sepal.Width)           # 평균
iris.sd <- sd(iris$Sepal.Width)               # 표준편차
iris.quan <- quantile(iris$Sepal.Width, 0.30) # 3분위수
# 2
hist(iris$Sepal.Width, xlab="Sepal.Width", ylab="Frequency", main="꽃받침 너비", family="maple")
# 3
aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=min)
# 4
agg.min <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=min)
agg.min <- rename(agg.min, min="x")
agg.max <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=max)
agg.max <- rename(agg.max, max="x")
agg.sw <- merge(agg.max, agg.min, by="Species")
library(dplyr)
# 4
agg.min <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=min)
agg.min <- rename(agg.min, min="x")
agg.max <- aggregate(iris$Sepal.Width, by=list(Species=iris$Species), FUN=max)
agg.max <- rename(agg.max, max="x")
agg.sw <- merge(agg.max, agg.min, by="Species")
(agg.sw <- mutate(agg.sw, x=max-min))
o <- order(agg.sw$x, decreasing=T)[1]
agg.sw[o,]
# 5
test <- iris %>% filter(Species=="virginica")
test <- test[,-5]
head(test)
# 6
cor(test)
