}
# 문제5
exam5 <- function(n, p='#') {
if (n >= 0) {
for (i in 1:n) {
cat(p)
}
}
}
exam5(10, '*')
exam5(5, '*')
exam5(5)
# 문제6
exam6 <- function(p) {
for (score in 1:length(p)) {
if (score >= 0 | score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
cat(score, '점은', result, '등급입니다.')
}
}
exam6(c(80,50,70,66,35))
exam6(c(80,50,70,66,35))
# 문제6
exam6 <- function(p) {
for (score in 1:length(p)) {
if (score >= 0 | score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
print(paste(score, '점은', result, '등급입니다.'))
}
}
exam6(c(80,50,70,66,35))
# 문제6
exam6 <- function(p) {
for (score in p) {
if (score >= 0 | score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
print(paste(score, '점은', result, '등급입니다.'))
}
}
exam6(c(80,50,70,66,35))
exam6(c(80,50,70,66,NA,35))
# 문제6
exam6 <- function(p) {
for (score in p) {
if (is.na(score)) {
print('NA는 처리불가')
} else if (score >= 0 | score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
print(paste(score, '점은', result, '등급입니다.'))
}
}
exam6(c(80,50,70,66,NA,35))
print(exam6(c(80,50,70,66,NA,35)))
exam1 <- function() {
return(paste0(LETTERS,letters))
}
exam1
exam1()
# 문제2
exam2 <- function(num){
sum <- 0
for(i in 1:num) {
sum += i
}
return(sum)
}
exam1()
# 문제2
exam2 <- function(num){
sum <- 0
for(i in 1:num) {
sum = sum + i
}
return(sum)
}
cat('함수 호출 결과 :', exam2(10))
cat('함수 호출 결과 :', exam2(100))
# 문제2
exam2 <- function(num){
sum <- 0
for(i in 1:num) {
sum = sum + i
}
return(sum)
}
cat('함수 호출 결과 :', exam2(10))
cat('함수 호출 결과 :', exam2(100))
exam2 <- function(num){
return(sum(c(1:num)))
}
cat('함수 호출 결과 :', exam2(10))
cat('함수 호출 결과 :', exam2(100))
exam3 <- function(x,y){
return(abs(x-y)) # abs() : 절댓값
}
print(paste('함수 호출 결과 :', exam3(10,3)))
print(paste('함수 호출 결과 :', exam3(5,5)))
print(paste('함수 호출 결과 :', exam3(7,10)))
# 문제3
exam3 <- function(n1,n2) {
if(n1 >= n2) {
result = n1 - n2
} else if (n2 > n1) {
result = n2 - n1
}
return(result)
}
print(paste('함수 호출 결과 :', exam3(10,3)))
print(paste('함수 호출 결과 :', exam3(5,5)))
print(paste('함수 호출 결과 :', exam3(7,10)))
# 문제4
exam4 <- function(n1,oper,n2) {
if (oper == '+') {
result = n1 + n2
} else if (oper == '-') {
reulst = n1 - n2
} else if (oper == '*') {
result = n1 * n2
} else if (oper == '%/%' | oper == '%%') {
if (n1 == 0) {
return('오류1')
next()
} else if (n2 == 0){
return('오류2')
next()
}
if (oper == '%/%') {
result = n1 %/% n2
} else if (oper == '%%') {
result = n1 %% n2
}
}
return(result)
}
exam4(3,'+',3)
exam4(3,'-',3)
exam4(3,'*',3)
exam4(3,'%/%',3)
exam4(3,'%%',3)
exam4(0,'%/%',3)
exam4(3,'%%',0)
# 문제4
exam4 <- function(n1,oper,n2) {
if (oper == '+') {
result = n1 + n2
} else if (oper == '-') {
reulst = n1 - n2
} else if (oper == '*') {
result = n1 * n2
} else if (oper == '%/%' | oper == '%%') {
if (n1 == 0) {
return('오류1')
next()
} else if (n2 == 0){
return('오류2')
next()
}
if (oper == '%/%') {
result = n1 %/% n2
} else if (oper == '%%') {
result = n1 %% n2
}
} else{
result = '규격의 연산자만 전달하세요.'
}
return(result)
}
exam4(3,'+',3)
exam4(3,'-',3)
exam4(3,'*',3)
exam4(3,'%/%',3)
exam4(3,'%%',3)
exam4(0,'%/%',3)
exam4(3,'%%',0)
# 문제5
exam5 <- function(n, p='#') {
if (n >= 0) {
for (i in 1:n) {
cat(p)
}
}
}
exam4()
exam4(1,'1',1)
# 문제5
exam5 <- function(n, p='#') {
if (n >= 0) {
for (i in 1:n) {
cat(p)
}
}
}
exam5(5, '*')
exam5(5)
# 문제5
exam5 <- function(n, p='#') {
if (n >= 0) {
for (i in 1:n) {
cat(p)
}
}
return(NULL)
}
exam5(5, '*')
exam5(5)
# Case2
exam5 <- function(num, ch='#'){
if(num >= 0){
print(rep(ch, num))
}
return()
}
exam5(5, '*')
exam5(5)
cat(rep(ch, num))
for (score in p) {
if (is.na(score)) {
print('NA는 처리불가')
next()
} else if (score >= 0 | score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
print(paste(score, '점은', result, '등급입니다.'))
}
# 문제6
exam6 <- function(p) {
for (score in p) {
if (is.na(score)) {
print('NA는 처리불가')
next()
} else if (score >= 0 | score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
print(paste(score, '점은', result, '등급입니다.'))
}
}
exam6(c(80,50,70,66,NA,35))
# 문제6
exam6 <- function(p) {
for (score in p) {
if (is.na(score)) {
print('NA는 처리불가')
next()
} else if (score >= 0 & score <= 100) {
if (score >= 85) {
result = '상'
} else if (score >= 70) {
result = '중'
} else {
result = '하'
}
}
print(paste(score, '점은', result, '등급입니다.'))
}
}
exam6(c(80,50,70,66,NA,35))
test1 <- function() {
print("test1호출")
}
test1()
r1 <- test1()
r1
test2 <- function() {
print("test2호출")
return()
}
test2()
r2 <- test2()
r2
paste0(c("R"), 1:10)
paste0(c("A", "B"), 1:10)
makeVector <- function(type, ...) {
return(switch(EXPR=type, paste0("A", c(...)),
paste0("B", c(...)),
paste0("C", c(...)),
paste0("D", c(...))))
}
makeVector(prefix=1,1,2,3,4,5)
makeVector(2,100,200,300)
makeVector(3,10,20,30,40,50,60,70,80,90)
makeVector(4,111,222,333,444,555)
makeVector(prefix=1,1,2,3,4,5)
makeVector(2,100,200,300)
makeVector(2,100,200,300)
makeVector(2,100,200,300)
makeVector(3,10,20,30,40,50,60,70,80,90)
makeVector(4,111,222,333,444,555)
v <- c(10,11,20,22,30,33)
evenodd1 <- function(p) if(p %% 2 == 0) return("even") else return("odd")
sapply(v, evenodd1)
lapply(v, evenodd1)
apply(v, evenodd1)
evenodd2 <- function(p) {
if(p %% 2 == 0)
r <- "even"
else
r <- "odd"
return("odd")
}
sapply(v, evenodd2)
lapply(v, evenodd2)
evenodd2 <- function(p) {
if(p %% 2 == 0)
r <- "even"
else
r <- "odd"
return("odd")
}
sapply(v, evenodd2)
lapply(v, evenodd2)
# R에도 전역 변수와 지역 변수가 있당
a<-3;b<-7;c<-11
ft<-function(a){
b<-a+10
c<<-a+10   # 전역대입연산
d<-a
print(a);print(b);print(c);print(d)
return()  # NULL
}
print(ft(100))
print(a);print(b);print(c);print(d)
ft.1 <- function(x) return()
ft.2 <- function(x) return(x+10)
ft.3 <- function(x) invisible(x+10)
ft.1(100)
ft.2(100)
ft.3(100)
r1 <- ft.1(1000);r1
ft.1(100)
ft.2(100)
ft.3(100)
ft.3
ft.3(
)
ft.3(100)
ft.3
r1 <- ft.1(1000);r1
r2 <- ft.2(1000);r2
r3 <- ft.3(1000);r3
# sleep() 함수 --> 웹에서 데이터 수집시 필요해용
testSleep <- function(second) {
for(data in LETTERS[1:5]) {
cat(data)
Sys.sleep(second)
}
}
testSleep(1)
testSleep(0)
testSleep(3)
# 매개변수에 전달된 데이터의 타입 채크
testParamType <- function(x){
if(is.vector(x)) print("벡터를 전달했군요!")
if(is.data.frame(x)) print("데이터프레임을 전달했군요!")
if(is.list(x)) print("리스트를 전달했군요!")
if(is.matrix(x)) print("매트릭스를 전달했군요!")
if(is.array(x)) print("배열을 전달했군요!")
if(is.function(x)) print("함수를 전달했군요!")
}
#dataframe이 list에, list는 vector에 포함 됨
#list는 원소 1개 짜리 1차원 배열과 같다.
testParamType(100)
testParamType(LETTERS)
testParamType(data.frame())
testParamType(data.frame())
testParamType(matrix())
testParamType(list())
testParamType(array())
testParamType(mean)
#testParamType1
testParamType1 <- function(x){
result <- NULL
if(is.vector(x)  && !is.list(x)) result <-"벡터를 전달했군요!"
else if(is.data.frame(x)) result <- "데이터프레임을 전달했군요!"
else if(is.list(x)) result <- "리스트를 전달했군요!"
else if(is.matrix(x)) result <- "매트릭스를 전달했군요!"
else if(is.array(x)) result <- "배열을 전달했군요!"
else if(is.function(x)) result <- "함수를 전달했군요!"
return(result)
}
testParamType1(100)
testParamType1(LETTERS)
testParamType1(data.frame())
testParamType1(matrix())
testParamType1(list())
testParamType1(array())
testParamType1(function(){})
#testParamType2
testParamType2 <- function(x){
result <- NULL
if(is.vector(x)  && !is.list(x) && is.numeric(x)) {
result <- sum(x)
} else {
stop("숫자 백터만을 원하오!!")
}
return(result)
}
testParamType2(1:3)
testParamType2(list(1,2,3))
testParamType2(LETTERS)
#stop() 함수도 알고 가자 -> R 에서의 실행 오류 발생 기능 제공
testError <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
return(rep("테스트",x))
}
testError(5)
testError(0)
#warning() 함수
testWarn <- function(x){
if(x<=0)
stop("양의 값만 전달 하숑!! 더 이상 수행 안할거임..")
if(x>5){
x<-5
warning("5보다 크면 안됨!! 하여 5로 처리했삼...!!")
}
return(rep("테스트",x))
}
testWarn(3)
testWarn(10)
testWarn(-1)
test1 <-function(p){
cat("난 수행함\n")
testError(-1)
cat("나 수행할 까요? \n")
}
test1()
#try() 함수를 알아야 데이터 수집을 편하게 할 수 있다.
test2 <- function(p){
cat("난 수행함\n")
try(testError(-1))
cat("나 수행할 까요? \n")
}
testAll <-function(p){
tryCatch({
if(p=="오류테스트"){
testError(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
},error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부에 관계없이 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
testAll("오류테스트")
testAll("경고테스트")
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
#Sys.sleep(초시간) 함수
testSleep <- function(x) {
for(data in 6:10) {
cat(data,"\n")
if(x)
Sys.sleep(1)
}
return()
}
testSleep(FALSE)
testSleep(TRUE)
