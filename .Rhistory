#올해의 크리스마스 요일 2가지방법(요일명,숫자)
christmas2<-as.POSIXlt("2022-12-25")
weekdays(christmas2)
# 문제3
birth <- as.POSIXlt('1996/07/10')
weekdays(birth)
gsub("[^1234567890]", "", word)
gsub("[[:punct:]^[,.]]", "", memo[1])
gsub("[[:punct:]]", "", memo[1])
gsub("[[&$!#@%]]", "", memo[1])
gsub("[&$!#@%]", "", memo[1])
memo
fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says)
toupper(memo[2])
memo[3]
gsub("[^1234567890]", "", memo[3])
gsub("[1234567890]", "", memo[3])
memo
gsub("[A-z]","",memo[4])
gsub["[[!<>][12345678]]", "", memo[5]]
gsub["[!<>12345678]]", "", memo[5]]
gsub["[!<>12345678]", "", memo[5]]
gsub["[!<>]", "", memo[5]]
gsub("[!<>12345678]", "", memo[5])
gsub("[[!<>][12345678]]", "", memo[5])
gsub("[[:space:]]", "", memo[6])
tolower(memo[7])
memo_new <- for (i in 1:7) memo+i
memo_new <- for (i in 1:7) 'memo' + i
memo_new <- for (i in 1:7) paste('memo', i, sep="")
memo_new
memo_new
memo_new <- for (i in 1:7) print(paste('memo', i, sep=""))
memo_new <- for (i in 1:7) cat('memo', i, sep=""))
memo_new <- for (i in 1:7) cat('memo', i, sep="")
memo_new <- for (i in 1:7) cat('memo', i, "\n" sep="")
memo_new <- for (i in 1:7) cat('memo', i, "\n", sep="")
memos <- for (i in 1:7) cat('memo', i, "", sep=",")
memos <- for (i in 1:7) cat('memo', i, "", sep="")
memos <- for (i in 1:7) cat('memo', i, "", sep="")cat(,)
memos <- for (i in 1:7) cat('memo', i, "", sep="")cat(",")
memos <- for (i in 1:7) cat('memo', i, "", sep="") cat(",")
m1 <- gsub("[&$!#@%]", "", memo[1])
m2 <- toupper(memo[2])
m3 <- gsub("[1234567890]", "", memo[3])
m4 <- gsub("[A-z]", "", memo[4])
m5 <- gsub("[!<>12345678]", "", memo[5])
m6 <- gsub("[[:space:]]", "", memo[6])
m7 <- tolower(memo[7])
# memos <- for (i in 1:7) cat('memo', i, "", sep="") cat(",")
memos <- c(m1,m2,m3,m4,m5,m6,m7)
write.table(memos, file="memo_new.txt")
# memos <- for (i in 1:7) cat('memo', i, "", sep="") cat(",")
memos <- m1,m2,m3,m4,m5,m6,m7
cat(m6)
m1 <- cat(gsub("[&$!#@%]", "", memo[1]))
m2 <- toupper(memo[2])
write.table(memos, file="memo_new")
memos <- for (i in 1:7) cat('m')
memos <- for (i in 1:7) cat('m',i)
memos <- for (i in 1:7) cat('m',i,sep="")
memos <- for (i in 1:7) cat('m', i, sep="")
write.table(memos, file="memo_new")
rm(memo_new.txt)
rm(memo_new.txt)
write.table(memos, file="memo_new", quote=F)
write.table(memos, file="memo_new", quote=F)
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
m1 <- gsub("[&$!#@%]", "", memo[1])
m2 <- toupper(memo[2])
m3 <- gsub("[1234567890]", "", memo[3])
m4 <- gsub("[A-z]", "", memo[4])
m5 <- gsub("[!<>12345678]", "", memo[5])
m6 <- gsub("[[:space:]]", "", memo[6])
m7 <- tolower(memo[7])
memos <- c(m1,m2,m3,m4,m5,m6,m7)
write.table(memos, file="memo_new", quote=F)
writeLines(memos, file="memo_new", quote=F)
writeLines(memos, file="memo_new")
writeLines(memos, "memo_new")
?write
write(memos, "memo_new")
write(memos, "memo_new")
write(memos, "memo_new.txt")
memo[4] <- gsub("[A-z]", "", memo[4])
memo[4]
memo[4] <- gsub("[A-z  ]", "", memo[4])
memo[4]
memo[4] <- gsub("[A-z(  )]", "", memo[4])
memo[4]
memo[4] <- gsub("[A-z(   )]", "", memo[4])
memo[4]
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
memo[4]
memo[4] <- gsub("[A-z(   )]", "", memo[4])
memo[4] <- gsub("[A-z(   )]", "", memo[4])
memo[4]
memo[4] <- gsub("[A-z"  "]", "", memo[4])
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
memo[4] <- gsub("[A-Za-z]", "", memo[4])
memo[4]
memo[4] <- gsub("  ", "", memo[4])
memo[4]
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
memo[4] <- gsub("  ", " ", memo[4])
memo[4] <- gsub("[A-Za-z]", "", memo[4])
memo[4]
memo[4] <- gsub("  ", " ", memo[4])
memo[4]
memo[7] <- gsub("(YOU)(OK)","(you)(ok)", memo[7]) # memo[7] <- tolower(memo[7])
memo[7]
memo[7] <- gsub("YOUK","youok", memo[7]) # memo[7] <- tolower(memo[7])
memo[7]
gsub("[[:upper:]]", "\\L\\1", memo[7], perl=T)
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
memo[7] <- gsub("[[:upper:]]", "\\L\\1", memo[7], perl=T) # memo[7] <- tolower(memo[7])
memo[7]
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
memo[7] <- gsub("[[:upper:]]", "\\L\\1", memo[7], perl=T) # memo[7] <- tolower(memo[7])
memo[7]
# 문제2
memo <- readLines("data/memo.txt", encoding="UTF-8")
memo
memo[7] <- gsub("([[:upper:]])", "\\L\\1", memo[7], perl=T) # memo[7] <- tolower(memo[7])
memo[7]
# 설치된 패키지 리스트
installed.packages()
# 현재 세션에 로드된 패키지 리스트
search()
if(!file.exists("output")) {
cat("워킹디렉토리에 output 폴더 생성함\n")
dir.create("output")
}
library(rvest)
# 확장(추가) 패키지의 설치작업은 하는 일이 많고 좀... 민감함...(^^)
# 가급적 하나하나 실행시키숑~~
install.packages("rvest")
install.packages("XML")
install.packages("httr")
library(rvest)
library(XML)
library(rvest)
library(XML)
library(httr)
library(httr)
# 현재 세션에 로드된 패키지 리스트
search()
install.packages("jsonlite")
install.packages("rtweet")
# [ 예제1 ]
library(rvest)
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)
text
nodes <- html_nodes(text, "div") # 태그 선택자
nodes
title <- html_text(nodes)
title
node1 <- html_nodes(text, "div:nth-of-type(1)")
node1
html_text(node1)
html_attr(node1, "style")
# [ 예제2 ]
# 웹문서 읽기
url <- "https://www.data.go.kr/tcs/dss/selectDataSetList.do"
# [ 예제2 ]
# 웹문서 읽기
url <- "https://www.data.go.kr/tcs/dss/selectDataSetList.do"
html <- read_html(url)
html
# 목록 아이템 추출
title <- html_text(html_nodes(html, "#apiDataList span.title"), trim=T)
title
# 목록 아이템 설명 추출
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"))
desc
# 목록 아이템 설명 추출
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"))
desc
# 데이터 정제: 제어문자를 공백으로 대체
title <- gsub("[[:cntrl:]]", "", title)
title
# 데이터 출력
api <- data.frame(title, desc)
api
View(api)
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"), trim=T)
desc
# 목록 아이템 설명 추출
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"))
desc
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"), trim=T)
desc
url <- 'http://unico2013.dothome.co.kr/crawling/exercise_bs.html'
text <- read_html(url)
nodes <- html_nodes(text,"h1")
nodes
# <a> 태그의 컨텐츠와 href 속성값
a_tag <- html_nodes(text,"a")
a_tag
a_tag_href <- html_text(text, trim=F)
a_tag_href
a_tag_href <- html_text(text, trim=T)
a_tag_href
a_tag_href <- html_attr(text, href)
node1 <- html_nodes(text, "div:nth-of-type(1)")
node1
html_text(node1)
html_attr(node1, "style")
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)
text
node1 <- html_nodes(text, "div:nth-of-type(1)")
node1
html_text(node1)
html_attr(node1, "style")
url <- 'http://unico2013.dothome.co.kr/crawling/exercise_bs.html'
text <- read_html(url)
# <h1> 태그의 컨텐츠
nodes <- html_nodes(text,"h1")
# <a> 태그의 컨텐츠와 href 속성값
a_tag <- html_nodes(text,"a")
a_tag_href <- html_attr(text, "href")
a_tag_href
html_attr(text, "href")
html_text(text)
# <a> 태그의 컨텐츠와 href 속성값
a_tag <- html_nodes(text,"a")
html_text(text)
html_attr(text, "href")
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)
text
nodes <- html_nodes(text, "div") # 태그 선택자
nodes
title <- html_text(nodes)
title
node1 <- html_nodes(text, "div:nth-of-type(1)")
node1
html_text(node1)
html_attr(node1, "style")
url <- 'http://unico2013.dothome.co.kr/crawling/exercise_bs.html'
texts <- read_html(url)
# <h1> 태그의 컨텐츠
nodes <- html_nodes(texts,"h1")
# <a> 태그의 컨텐츠와 href 속성값
a_tag <- html_nodes(texts,"a")
html_text(texts)
html_attr(texts, "href")
# <a> 태그의 컨텐츠와 href 속성값
a_tag <- html_nodes(texts,"a")
a_tag
html_text(a_tag)
# <h1> 태그의 컨텐츠
nodes <- html_nodes(texts,"h1")
nodes
a_tag
a_tag <- html_nodes(texts,"a")
a_tag
html_text(a_tag)
html_attr(a_tag, "href")
html_attr(a_tag, "href")
html_attr(img_tag, "src")
# <img> 태그의 src 속성값
img_tag <- html_nodes(texts,"img")
html_attr(img_tag, "src")
# <a> 태그의 컨텐츠와 href 속성값
a <- html_nodes(texts,"a")
html_attr(a, "href")
# <img> 태그의 src 속성값
img <- html_nodes(texts,"img")
html_attr(img, "src")
# 첫번째 <h2> 태그의 컨텐츠
h2 <- html_nodes(texts, "h2")
h2
# 첫번째 <h2> 태그의 컨텐츠
h2 <- html_nodes(texts, "h2:nth-of-type(1)")
h2
html_text(h2)
html_attr(ul,"style:green")
node2 <- html_nodes(text, "div:nth-of-type(2)")
node2
html_text(node2)
html_attr(node2, "style")
node3 <- html_node(text, "div:nth-of-type(3)")
node3
html_text(node3)
html_attr(node3, "style")
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)
text
nodes <- html_nodes(text, "div") # 태그 선택자
nodes
title <- html_text(nodes)
title
node1 <- html_nodes(text, "div:nth-of-type(1)")
node1
html_text(node1)
html_attr(node1, "style")
node2 <- html_nodes(text, "div:nth-of-type(2)")
node2
html_text(node2)
html_attr(node2, "style")
node3 <- html_node(text, "div:nth-of-type(3)")
node3
html_text(node3)
html_attr(node3, "style")
# [ 예제2 ]
# 웹문서 읽기
url <- "https://www.data.go.kr/tcs/dss/selectDataSetList.do"
html <- read_html(url)
html
# 목록 아이템 추출
title <- html_text(html_nodes(html, "#apiDataList span.title"), trim=T)
title
html_attr(ul,"style.green")
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul, style.green")
html_attr(ul)
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul, style.green")
html_text(ul)
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul, style.color:green")
html_attr(node2, "style")
html_attr(node1, "style")
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul")
html_attr(ul,'style')
ul
html_attr(ul,'style')
html_attr(ul,"style")
html_text(ul)
html_attr(ul,"style")
# 두번째 <h2> 태그의 컨텐츠
h2_2 <- html_nodes(texts, "h2:nth-of-type(2)")
h2_2
html_text(h2_2)
# <ol> 태그의 모든 자식 태그들의 컨텐츠
ol <- html_nodes(texts, "ol")
ol
html_text(ol)
html_text(ol, trim=T)
# <ol> 태그의 모든 자식 태그들의 컨텐츠
ol <- html_nodes(texts, "ol")
html_text(ol, trim=T)
?html_text
# [ 예제2 ]
# 웹문서 읽기
url <- "https://www.data.go.kr/tcs/dss/selectDataSetList.do"
html <- read_html(url)
html
# 목록 아이템 추출
title <- html_text(html_nodes(html, "#apiDataList span.title"), trim=T)
title
# 목록 아이템 설명 추출
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"))
desc
# 데이터 정제: 제어문자를 공백으로 대체
title <- gsub("[[:cntrl:]]", "", title)
title
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"), trim=T)
desc
# <ol> 태그의 모든 자식 태그들의 컨텐츠
html_text(html_nodes(texts, "ol"))
menu <- gsub("[[:cntrl:]]", "", ol)
menu
ol
# <ol> 태그의 모든 자식 태그들의 컨텐츠
ol <- html_text(html_nodes(texts, "ol"))
ol
menu <- gsub("[[:cntrl:]]", "", ol)
ol
menu
ol <- html_text(html_nodes(texts, "ol"), trim=T)
ol
# <ol> 태그의 모든 자식 태그들의 컨텐츠
ol <- html_text(html_nodes(texts, "ol"))
ol
menu <- gsub("[[:cntrl:]]", "", ol)
menu
ol <- html_text(html_nodes(texts, "ol"), trim=T)
menu <- gsub("[[:cntrl:]]", "", ol)
menu
# <ol> 태그의 모든 자식 태그들의 컨텐츠
ol <- html_text(html_nodes(texts, "ol"))
menu <- gsub("[[:cntrl:]]", "", ol)
menu
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"), trim=T)
desc
# 목록 아이템 추출
title <- html_text(html_nodes(html, "#apiDataList span.title"), trim=T)
title
# 목록 아이템 설명 추출
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"))
desc
# <ol> 태그의 모든 자식 태그들의 컨텐츠
ol <- html_text(html_nodes(texts, "ol"))
ol
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_nodes(texts, "table")
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_text(html_nodes(texts, "table"))
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_text(html_nodes(texts, "#table"))
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul")
html_text(ul)
html_attr(ul, "style")
html_text(ul)
html_attr(ul, "style")
html_text(ul, trim=T)
html_text(ul, trim=F)
html_text(ul)
# name이라는 클래스 속성을 갖는 <tr> 태그의 컨텐츠
html_text(html_nodes(texts, "tr.name"))
# target이라는 아이디 속성을 갖는 <td> 태그의 컨텐츠
html_text(html_nodes(texts, "td#target"))
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)
text
nodes <- html_nodes(text, "div") # 태그 선택자
nodes
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul")
ul
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul")
ul
nodes <- html_nodes(text, "div") # 태그 선택자
nodes
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_text(html_nodes(texts, "table"))
# 데이터 정제: 제어문자를 공백으로 대체
title <- gsub("[[:cntrl:]]", "", title)
title
desc <- gsub("[[:cntrl:]]", "", desc)
desc
# 목록 아이템 추출
title <- html_text(html_nodes(html, "#apiDataList span.title"), trim=T)
title
# 데이터 정제: 제어문자를 공백으로 대체
title <- gsub("[[:cntrl:]]", "", title)
title
html
# 목록 아이템 추출
title <- html_text(html_nodes(html, "#apiDataList span.title"), trim=T)
title
# 데이터 정제: 제어문자를 공백으로 대체
title <- gsub("[[:cntrl:]]", "", title)
title
# 목록 아이템 설명 추출
desc <- html_text(html_nodes(html, "#apiDataList .ellipsis"))
desc
desc <- gsub("[[:cntrl:]]", "", desc)
desc
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul")
ul
html_text(ul)
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul, style")
ul
html_text(ul)
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul, style:green")
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
ul <- html_nodes(texts,"ul, green")
ul
html_text(ul)
html_attr(ul, "style")
html_attr(ul, style)
html_attr(ul, "style", default="green")
?html_attr
html_attr(ul, "style", default="green")
html_attrs(ul)
html_attrs(html_text(ul))
html_attr(ul)
html_attr(ul, "style")
html_attr(html_text(ul), "style")
html_text(ul)
ul
html_attr(ul, "green")
html_attr(ul, "color:green")
html_attr(ul, "li")
html_text(ul)
# 첫번째 <h2> 태그의 컨텐츠
h2 <- html_nodes(texts, "h2:nth-of-type(1)")
h2
html_text(h2)
# <ul> 태그의 자식 태그들 중 style 속성의 값이 green으로 끝나는 태그의 컨텐츠
html_text(html_nodes(texts,"ul > [style$=green]"))
# <ol> 태그의 모든 자식 태그들의 컨텐츠
html_text(html_nodes(texts, "ol > li"))
html_text(html_nodes(texts, "ol > *"))
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_text(html_nodes(texts, "table *"))
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_text(html_nodes(texts, "table > *"))
# <table> 태그의 모든 자손 태그들의 컨텐츠
html_text(html_nodes(texts, "table *"))
# name이라는 클래스 속성을 갖는 <tr> 태그의 컨텐츠
html_text(html_nodes(texts, "tr.name"))
# target이라는 아이디 속성을 갖는 <td> 태그의 컨텐츠
html_text(html_nodes(texts, "td#target"))
