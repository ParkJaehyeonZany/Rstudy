test <- iris %>% filter(Species=="viraginica") %>% select(-Species)
head(test)
test <- iris %>% filter(Species=="virginica") %>% select(-Species)
head(test)
# 6
cor(test)
install.packages("corrplot")
install.packages("psych")
install.packages("corrgram")
install.packages("car")
install.packages("gvlma")
install.packages("leaps")
(ex<-rnorm(30,5,10))
plot(ex)
hist(ex)
shapiro.test(ex)
qqnorm(ex)
qqline(ex)
(ex<-rnorm(30,5,10))      # 평균은 5 표준편차는 10인 난수 30개
plot(ex)
(ex<-rnorm(30,5,10))      # 평균은 5 표준편차는 10인 난수 30개
plot(ex)
hist(ex)
shapiro.test(ex)
qqnorm(ex)
qqline(ex)
plot(iris$Sepal.Length)
hist(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqnorm(ex)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
shapiro.test(iris$Sepal.Length)
shapiro.test(log(iris$Sepal.Length))
qqnorm(log(iris$Sepal.Length))
qqline(log(iris$Sepal.Length))
### 데이터의 등분산성 검정 ###
##
x <- rnorm(50, mean = 0, sd = 2)
y <- rnorm(30, mean = 1, sd = 1)
z <- rnorm(30, mean = 3, sd = 2)
var.test(x, y)
var.test(x, z)
myiris <- iris[-5]
cor(myiris)
cor.test(myiris$Sepal.Length, myiris$Sepal.Width)
cor.test(myiris$Sepal.Length, myiris$Petal.Length)
cor.test(myiris$Sepal.Length, myiris$Petal.Width)
cor.test(myiris$Sepal.Width, myiris$Petal.Length)
cor.test(myiris$Sepal.Width, myiris$Petal.Width)
cor.test(myiris$Petal.Width, myiris$Petal.Length)
library(psych)
lowerCor(myiris, use="pairwise")
corr.test(myiris, use="pairwise")
corPlot(myiris, numbers=T, stars=T, upper=F, diag=F)
# 상관분석 결과를 보다 잘 표현할 수 있는 상관분석 관련 시각화 패키지들 소개
library(corrplot)  # corrplot 패키지 불러오기
car_cor <- cor(mtcars[, -12])
car_cor
dim(car_cor)
round(car_cor,2)
corrplot(car_cor)
corrplot(car_cor, order="hclust")
corrplot(car_cor, type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="ellipse", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="ellipse", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="number", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="shade", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="color", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="pie", type="lower", order="hclust", tl.srt=45, diag=F)
corrplot(car_cor, method="color", type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="color", addCoef.col="black", type="lower", order="hclust", tl.srt=45)
corrplot(car_cor, method="color", addCoef.col="black", type="lower", diag=F, tl.srt=45)
corrplot(car_cor, method="color", addCoef.col="black", type="lower", order="hclust", tl.srt=45)
library(psych)
pairs.panels(state.x77, bg="red", pch=21, hist.col="gold",
main="Correlation Plot of US States Data")
library(corrgram)
corrgram(state.x77, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Corrgram of US States Data")
cols <- colorRampPalette(c("darkgoldenrod4", "burlywood1",
"darkkhaki", "darkgreen"))
corrgram(state.x77, order=FALSE, col.regions=cols,
lower.panel=panel.pie, upper.panel=panel.conf,
text.panel=panel.txt, main="Corrgram of US States Data")
# 단순 선형 회귀분석
model = lm(dist ~ speed, data = cars)
summary(model)
abline(model,col="red")
model$residuals
residuals(model)
# 사전 작업
plot(cars$speed, cars$dist)
cor(cars$speed, cars$dist)
# 단순 선형 회귀분석
model = lm(dist ~ speed, data = cars)
summary(model)
abline(model,col="red")
model$residuals
residuals(model)
class(model)
plot(model, 1)
plot(model, 2)
shapiro.test(model$residuals)
plot(model, 3)
plot(model, 4)
plot(model)
# 심하게 이상치로 판정되는 49번째 데이터를 제외한 후에 다시 단순 선형 회귀분석 실시
cars1 <- cars[-49,]
model1 = lm(dist ~ speed, data = cars1)
summary(model1)
plot(model1, 1)
plot(model1, 2)
shapiro.test(model1$residuals)
plot(model1, 3)
plot(model1, 4)
fac <- read.csv("data/factory.csv")
fac
head(fac)
plot(fac)
library(ggplot2)
fac %>% ggplot()
fac %>% ggplot(xlab="사용연도")
plot(fac, xlab="사용연도", ylab="정비비용")
plot(fac, xlab="사용연도", ylab="정비비용", main="사용연도와 정비비용")
plot(fac,
xlab="사용연도", ylab="정비비용",
main="사용연도와 정비비용",
cex.main=3)
plot(fac,
xlab="사용연도", ylab="정비비용",
main="사용연도와 정비비용",
cex.main=2)
library(showtext)
showtext_auto()
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
main="사용연도와 정비비용",
cex.main=2,
main.color="red",
family="maple")
head(fac)
fac %>% ggplot(aes(cost,age)) %>% geom_point()
fac %>% ggplot(aes(x=cost,y=age)) %>% geom_point()
fac %>% ggplot() %>% geom_point()
fac %>% ggplot(aes(age, cost)) %>% geom_point(size=3,aes(color="blue"))
library(ggplot2)
fac %>% ggplot(aes(age, cost)) %>% geom_point(size=3,aes(color="blue"))
fac %>% ggplot(aes(age, cost))
fac %>% ggplot(aes(age, cost)) %>% geom_point()
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
title("사용연도와 정비비용")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col="blue"
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=1,
col="blue"
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=1,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=0,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=2,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=3,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=4,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=16,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 2
cor(fac)
# 3
cor.test(fac)
# 2
cor(fac)
myiris <- iris[-5]
# 3
cor.test(fac$age,fac$cost)
# 4
factory.lm = lm(cost ~ age, data = factory)
# 4
factory.lm = lm(cost ~ age, data = fac)
factory.lm
# 4
factory.lm = lm(cost ~ age, data = fac)
factory.lm
# 5
abline(fac,col="red")
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=16,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 2
cor(fac)
# 3
cor.test(fac$age,fac$cost)
# 4
factory.lm = lm(cost ~ age, data = fac)
# 5
abline(fac,col="red")
# 사전 작업
plot(cars$speed, cars$dist)
cor(cars$speed, cars$dist)
# 단순 선형 회귀분석
model = lm(dist ~ speed, data = cars)
summary(model)
abline(model,col="red")
# 4
factory.lm = lm(cost ~ age, data = fac)
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=16,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 2
cor(fac)
# 3
cor.test(fac$age,fac$cost)
# 4
factory.lm = lm(cost ~ age, data = fac)
# 5
abline(factory.lm,col="red")
# 단순 선형 회귀분석
model = lm(dist ~ speed, data = cars)
summary(model)
abline(model,col="red")
# 5
abline(factory.lm,col="red")
# 6
summary(factory.lm)
model$residuals
residuals(factory.lm)
plot(model, 1)
plot(model, 2)
shapiro.test(model$residuals)
plot(model, 3)
plot(model, 4)
# 7
df <- data.frame(age = 4)
predict.lm(factory.lm, newdata = df)
# 1
plot(fac,
xlab="사용연도", ylab="정비비용",
col.main="red",
pch=16,
col="blue",
main="사용연도와 정비비용",
cex.main=2,
family="maple")
# 2
cor(fac)
# 3
cor.test(fac$age,fac$cost)
# 4
factory.lm = lm(cost ~ age, data = fac)
# 5
abline(factory.lm,col="red")
# 6
summary(factory.lm)
residuals(factory.lm)
summary(factory.lm)$r.squared
# 7
df <- data.frame(age = 4)
predict.lm(factory.lm, newdata = df)
b_0 <- summary(factory.lm$coefficients[1,1])
b_1 <- summary(factory.lm$coefficients[2,1])
(estimate_4 = b_1*4 + b_0)
b_0 <- summary(factory.lm$coefficients[1,1])
# 4
factory.lm = lm(cost ~ age, data = fac)
b_0 <- summary(factory.lm$coefficients[1,1])
b_0 = summary(factory.lm$coefficients[1,1])
str(model)
# 결정계수와 수정된 결정계수
summary(model)
## 다중회귀분석 예제 1
# 엄마와 아빠 키로 아들의 키를 예측하는 다중선형회귀모델 생성
height_father <- c(180, 172, 150, 180, 177, 160, 170, 165, 179, 159) # 아버지 키
height_mohter <- c(160, 164, 166, 188, 160, 160, 171, 158, 169, 159) # 어머니 키
height_son <- c(180, 173, 163, 184, 165, 165, 175, 168, 179, 160) # 아들 키
height <- data.frame(height_father, height_mohter, height_son)
head(height)
model <-lm (height_son ~ height_father + height_mohter, data = height)
model
# 결정계수와 수정된 결정계수
summary(model)
(coef_r <- coef(model))
coef_r[1]
coef_r[2]
coef_r[3]
# 잔차
r <- residuals(model)
r[1:4]
coef_r[1]
coef_r[2]
coef_r[3]
# 잔차
r <- residuals(model)
r[1:4]
r
# 예측
predict.lm(model, newdata = data.frame(height_father = 170, height_mohter = 160))
predict.lm(model, newdata = data.frame(height_father = 170, height_mohter = 160), interval = "confidence")
## 다중회귀분석 예제 2
head(state.x77) # 미국 50개 주의 인구, 소득, 문맹률 등에 대한 데이터
# state.x77 데이터 중에서 5개 변수만 선정한 데이터프레임을 만든다
states <- data.frame(state.x77[, c("Murder", "Population", "Illiteracy", "Income", "Frost")])
head(states)
cor(states)
str(states)
lowerCor(states, use="pairwise")
corr.test(states, use="pairwise")
corPlot(states, numbers=T, stars=T, upper=F, diag=F)
# 다중회귀분석 실행
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
summary(fit)
fit
op <- par(mfrow=c(2,2)) # 2 x 2 pictures on one plot
plot(fit)
par(op)
plot(fit, 4)
op <- par(mfrow=c(2,2)) # 2 x 2 pictures on one plot
par(op)
plot(fit,2)
fita <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states[-28, ])
summary(fita)
op <- par(mfrow=c(2,2)) # 2 x 2 pictures on one plot
plot(fita)
par(op)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states) # fit <- lm(Murder ~ ., data=states)
fit2 <- lm(Murder ~ Population + Illiteracy, data=states)
summary(fit)
summary(fit2)
AIC(fit, fit2)
library(MASS)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
step(fit, direction="backward")
library(leaps)
library(RColorBrewer)
states.regsubsets <- regsubsets(x=Murder ~ Population + Illiteracy + Income + Frost, data=states, nbest=4)
plot(states.regsubsets, scale="adjr2", col=brewer.pal(9, "Pastel1"),
main="All Subsets Regression")
# 또 다른 예
mtcars.regsubsets <- regsubsets(x=mpg ~ hp + wt + disp + drat, data=mtcars, nbest=4)
plot(mtcars.regsubsets, scale="adjr2", col=brewer.pal(9, "Pastel1"),
main="All Subsets Regression")
purifier <- read.csv("data/purifier.csv")
head(purifier)
pur <-lm(as_time ~ ., data=purifier)
pur
purifier <- cbind(purifier, purifier-old_purifier)
new_purifier <- purifier$purifier-purifier$old_purifier
new_purifier
new_purifier <- data.frame(purifier$purifier-purifier$old_purifier)
new_purifier
colnames(new_purifier, new_purifier)
colnames(new_purifier) <- new_purifier
new_purifier
colnames(new_purifier) <- "new_purifier"
colnames(new_purifier) <- "new_purifier"
new_purifier
head(purifier)
purifier <- cbind(purifier, new_purifier)
purifier
pur <-lm(as_time ~ ., data=purifier)
pur
purifier <- read.csv("data/purifier.csv")
head(purifier)
new_purifier <- data.frame(purifier$purifier-purifier$old_purifier)
colnames(new_purifier) <- "new_purifier"
purifier <- cbind(purifier, new_purifier)
head(purifier)
pur <-lm(as_time ~ ., data=purifier)
pur
pur <-lm(as_time ~ old_purifier + new_purifier, data=purifier)
pur
summary(pur)
head(mtcars)
mtcars2 <- data.frame(mtcars[, c(1,3,4,6)])
corr.test(mtcars2, use="complete")
fit <- lm(mpg ~ disp + hp + wt, data=mtcars2)
summary(fit)
vif(fit)
library(car)
vif(fit)
fit <- lm(mpg ~ hp + wt, data=mtcars2)
summary(fit)
purifier <- read.csv("data/purifier.csv")
head(purifier)
new_purifier <- data.frame(purifier$purifier-purifier$old_purifier)
colnames(new_purifier) <- "new_purifier"
purifier <- cbind(purifier, new_purifier)
head(purifier)
pur <-lm(as_time ~ old_purifier + new_purifier, data=purifier)
summary(pur)
plot(pur)
op <- par(mfrow=c(2,2))
plot(pur)
head(purifier)
df <- data.frame(as_time)
predict.lm(pur, newdata = df)
df <- data.frame(as_time = 8*20)
predict.lm(pur, newdata = df)
pur <-lm(as_time ~ old_purifier + new_purifier, data=purifier)
df <- data.frame(as_time = 8*20)
predict.lm(pur, newdata = df)
