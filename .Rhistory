if(p=="오류테스트"){
testError(-1)
}else if (p =="경고테스트"){
testWarn(6)
}else{
cat("정상 수행..\n")
print(testError(2))
print(testWarn(3))
}
},warning = function(w){
print(w)
cat("-.-;;\n")
},error = function(e){
print(e)
cat("ㅠㅠ \n")
},finally ={
cat("오류, 경고 발생 여부에 관계없이 반드시 수행되는 부분입니다요..\n")
})
}
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
testAll("오류테스트")
testAll("경고테스트")
testAll("오류테스트")
testAll("경고테스트")
testAll("아무거나")
#Sys.sleep(초시간) 함수
testSleep <- function(x) {
for(data in 6:10) {
cat(data,"\n")
if(x)
Sys.sleep(1)
}
return()
}
testSleep(FALSE)
testSleep(TRUE)
countEvenOdd <- function(num) {
even <- 0
odd <- 0
if (is.vector(num)) {
return()
} else {
for (i in num) {
if (i%%2 == 0) {
even <- even + 1
} else {
odd <- odd + 1
}
}
return(list(even,odd))
}
}
countEvenOdd(c(1,2,3,4,5))
# 문제1
countEvenOdd <- function(num) {
# 문제1
countEvenOdd <- function(num) {
# 문제1
countEvenOdd <- function(num) {
# 문제1
countEvenOdd <- function(num) {
odd <- 0
if (is.vector(function(num)) {
return()
} else {
for (i in num) {
if (i%%2 == 0) {
even <- even + 1
} else {
odd <- odd + 1
}
}
return(list(even,odd))
}
}
countEvenOdd(c(1,2,3,4,5))
# 문제1
countEvenOdd <- function(num) {
# 문제1
countEvenOdd <- function(num) {
odd <- 0
if (is.vector(num) {
return()
} else {
for (i in num) {
if (i%%2 == 0) {
even <- even + 1
} else {
odd <- odd + 1
}
}
return(list(even,odd))
}
}
countEvenOdd(c(1,2,3,4,5))
# 문제1
countEvenOdd <- function(num) {
even <- 0
odd <- 0
if (is.vector(num)) {
return()
} else {
for (i in num) {
if (i%%2 == 0) {
even <- even + 1
} else {
odd <- odd + 1
}
}
return(list(even,odd))
}
}
countEvenOdd(c(1,2,3,4,5))
# 문제1
countEvenOdd <- function(num) {
even <- 0
odd <- 0
if (!is.numeric(num)) {
return()
} else {
for (i in num) {
if (i%%2 == 0) {
even <- even + 1
} else {
odd <- odd + 1
}
}
return(list(even,odd))
}
}
countEvenOdd(c(1,2,3,4,5))
countEvenOdd(1:10)
countEvenOdd(c('asd',1,2,3))
# 문제2
vmSum() <- function(num) {
if (!is.vector(num)) {
return('벡터만 전달하숑!')
} else if (!is.numeric(num)) {
print('숫자 벡터를 전달하숑!')
return(0)
} else {
return(sum(num))
}
}
# 문제2
vmSum() <- function(num) {
if (!is.vector(num)) {
return('벡터만 전달하숑!')
} else if (!is.numeric(num)) {
print('숫자 벡터를 전달하숑!')
return(0)
} else {
result <- sum(num)
return(result)
}
}
# 문제2
vmSum <- function(num) {
if (!is.vector(num)) {
return('벡터만 전달하숑!')
} else if (!is.numeric(num)) {
print('숫자 벡터를 전달하숑!')
return(0)
} else {
result <- sum(num)
return(result)
}
}
vmSum(c(1,2,3,4,5))
vmSum(1:10)
vmSum(c('asd',1,2,3))
# 문제3
vmSum2 <- function(v) {
if (!is.vector(v)) {
stop('벡터만 전달하숑!')
} else if (!is.numeric(v)) {
warning('숫자 벡터를 전달하숑!')
return(0)
} else {
return(sum(v))
}
}
vmSum2(c(1,2,3,4,5))
vmSum2(1:10)
vmSum2(c('asd',1,2,3))
vmSum2(matrix)
vmSum(matrix)
v[count]
?min
# 문제4
mySum <- function(v) {
oddSum <- 0
evenSum <- 0
if (is.null(v)) {
return()
} else if (!is.vector(v)) {
stop('벡터만 처리 가능!!')
} else if (any(is.na(v))) {
warning('NA를 최저값으로 변경하여 처리함!!')
v[is.na(v)] <- min(v, na.rm = T)
}
oddSum <- sum(v[seq(from=1, to=length(v), by=2)])
evenSum <- sum(v[seq(from=2, to=length(v), by=2)])
return(list(evenSum, oddSum))
}
mySum(array(1:10))
mySum(c(19,1,NA,5,4,NA,11))
mySum(1:10)
mySum(NULL)
# 문제4
mySum <- function(v) {
oddSum <- 0
evenSum <- 0
if (is.null(v)) {
return()
} else if (!is.vector(v)) {
stop('벡터만 처리 가능!!')
} else if (any(is.na(v))) {
warning('NA를 최저값으로 변경하여 처리함!!')
v[is.na(v)] <- min(v, na.rm = T)
}
oddSum <- sum(v[seq(from=1, to=length(v), by=2)])
evenSum <- sum(v[seq(from=2, to=length(v), by=2)])
return(list(evenSum, oddSum))
}
mySum(array(1:10))
# 문제4
mySum <- function(v) {
oddSum <- 0
evenSum <- 0
if (is.null(v)) {
return()
} else if (!is.vector(v)) {
stop('벡터만 처리 가능!!')
} else if (any(is.na(v))) {
warning('NA를 최저값으로 변경하여 처리함!!')
v[is.na(v)] <- min(v, na.rm = T)
}
oddSum <- sum(v[seq(from=1, to=length(v), by=2)])
evenSum <- sum(v[seq(from=2, to=length(v), by=2)])
return(list(evenSum, oddSum))
}
mySum(array(1:10))
mySum(c(19,1,NA,5,4,NA,11))
mySum(1:10)
mySum(NULL)
# 문제4
mySum <- function(v) {
oddSum <- 0
evenSum <- 0
if (is.null(v)) {
return()
} else if (!is.vector(v)) {
stop('벡터만 처리 가능!!')
} else if (any(is.na(v))) {
warning('NA를 최저값으로 변경하여 처리함!!')
v[is.na(v)] <- min(v)
}
oddSum <- sum(v[seq(from=1, to=length(v), by=2)])
evenSum <- sum(v[seq(from=2, to=length(v), by=2)])
return(list(evenSum, oddSum))
}
mySum(array(1:10))
mySum(c(19,1,NA,5,4,NA,11))
mySum(1:10)
mySum(NULL)
# 정규표현식의 기능과 작성방법 점검
# gsub() : 대체하는 함수
word <- "JAVA javascript 가나다 123 %^&*"
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
word
gsub(" ", "@", word)
sub(" ", "@", word)
sub(" ", "@", word)
gsub("Aa", "", word)
gsub("Aa{2}", "", word)
gsub("Aa{2}", "", word)
word
gsub("(Aa){2}", "", word)
# 정규표현식의 기능과 작성방법 점검
# gsub() : 대체하는 함수
word <- "JAVA javascript 가나다 123 %^&*"
gsub("A", "", word)
gsub("a", "", word)
gsub("[Aa]", "", word)
word <- "JAVA javascript Aa 가나다 AAaAaA123 %^&*"
gsub("[Aa]", "", word)
gsub("(Aa){2}", "", word)
x <- "We have a dream"
nchar(x)
length(x)
y <- c("We", "have", "a", "dream", "ㅋㅋㅋ")
length(y)
nchar(y)
letters
sort(letters, decreasing=TRUE)
letters
sort(letters, decreasing=TRUE)
sort(letters
)
fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says)
toupper(fox.says)
substr("Data Analytics", start=1, stop=4)
substr("Data Analytics", start=1, stop=1)
substr("Data Analytics", 3, 3)
substr("Data Analytics", start=2, stop=7)
substr("Data Analytics", 6, 14)
substr("Data Analytics", start=2)
# substr("Data Analytics", start=2)
substr("Data Analytics", start=c(1,6), stop=c(4, 14))
substring("Data Analytics", first=6)
substring("Data Analytics", first=c(1,6), last=c(4, 14))
classname <- c("Data Analytics", "Data Mining",
"Data Visualization")
substr(classname, 1, 4)
countries <- c("Korea, KR", "United States, US",
"China, CN")
substr(countries, nchar(countries)-1, nchar(countries))
nchar(y)
substr(countries,
, nchar(countries))
nchar(countries)-1
nchar(countries)
?iris
?islands
str(islands)
head(islands)
landmesses <- names(islands)
landmesses
grep(pattern="New", x=landmesses)
index <- grep("New", landmesses)
landmesses[index]
# 동일
grep("New", landmesses, value=T)
txt <- "Data Analytics is useful. Data Analytics is also interesting."
sub(pattern="Data", replacement="Business", x=txt)
gsub(pattern="Data", replacement="Business", x=txt)
x <- c("test1.csv", "test2.csv", "test3.csv", "test4.csv")
x <- gsub(".csv", "", x)
x
gsub("[ABC]", "@", "123AunicoBC98ABC")
gsub("ABC", "@", "123AunicoBC98ABC")
gsub("(AB)|C", "@", "123AunicoBC98ABC")
gsub("A|(BC)", "@", "123AunicoBC98ABC")
gsub("A|B|C", "@", "123AunicoBC98ABC")
grep("che", words, value=T) # 포함하는 원소들의 값들로 구성된 벡터 리턴
words <- c("ct", "at", "bat", "chick", "chae", "cat",
"cheanomeles", "chase", "chasse", "mychasse",
"cheap", "check", "cheese", "hat", "mycat", "mycheese")
grep("che", words, value=T) # 포함하는 원소들의 값들로 구성된 벡터 리턴
words
grep("che", words) # 포함하는 원소들의 인덱스들로 구성된 벡터 리턴
grep("[ch]", words, value=T)
grep("[at]", words, value=T)
grep("ch|at", words, value=T)
grep("ch(e|i)ck", words, value=T)
grep("chase", words, value=T)
grep("chas?e", words, value=T)
grep("chas*e", words, value=T)
grep("cha*e", words, value=T)
grep("chas+e", words, value=T)
grep("ch(a*|e*)se", words, value=T)
grep("^c", words, value=T)  #[^....]  -> 부정   ^xxx  -> 시작
grep("t$", words, value=T)  # xxx$  -> 종료
grep("^c.*t$", words, value=T)
grep("^c", words, value=T)  #[^....]  -> 부정   ^xxx  -> 시작
grep( "^[^c]+$", words, value=T)
words2 <- c("12 Dec", "OK", "http//",
"<TITLE>Time?</TITLE>",
"12345", "Hi there", "가나다")
grep("[[:alnum:]]", words2, value=TRUE)
words2
grep("[[:alpha:]]", words2, value=TRUE)
grep("[[:digit:]]", words2, value=TRUE)
grep("[[:punct:]]", words2, value=TRUE)
grep("[[:space:]]", words2, value=TRUE)
grep("\\w", words2, value=TRUE)
grep("\\d", words2, value=TRUE)
grep("[[:digit:]]", words2, value=TRUE)
grep("\\D", words2, value=TRUE)
grep("[[:punct:]]", words2, value=TRUE)
grep("\\s", words2, value=TRUE)
grep("[[:space:]]", words2, value=TRUE)
grep("\\w", words2, value=TRUE)
grep("[[:alnum:]]", words2, value=TRUE)
grep("\\D", words2, value=TRUE)
grep("[[:alpha:]]", words2, value=TRUE)
fox.said <- "What is essential is invisible to the eye"
fox.said
strsplit(x= fox.said, split= " ")
strsplit(x= fox.said, split="")
strsplit(x= fox.said, split="")
strsplit(x= fox.said)
fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words[3]
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
p2 <- "One runs the risk of weeping a little, if one lets himself be tamed"
p3 <- "What makes the desert beautiful is that somewhere it hides a well"
(littleprince <- c(p1, p2, p3))
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]]
strsplit(littleprince, " ")[[3]][5]
(today <- Sys.Date())
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]]
strsplit(littleprince, " ")[[3]][5]
format(today, "%Y년 %m월 %d일")
format(today, "%d일 %B %Y년")
format(today, "%B %b %m")
format(today, "%y")
format(today, "%Y")
format(today, "%B")
format(today, "%b")
format(today, "%a")
format(today, "%A")
weekdays(today)
months(today)
quarters(today)
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
Sys.Date(); str(Sys.Date())
Sys.time();str(Sys.time());class(Sys.time())
Sys.timezone()
date()
as.Date('1/17/2022') # 에러발생
as.Date('2022/1/17') # 잘 인식한다.
as.Date('2022-1-17')
as.Date('2022-01-17')
as.Date('2022년 1월 17일')
as.Date('110228',format='%y%m%d')
as.Date('11228',format='%d%b%y')
as.Date('110228',format='%d%b%y')
x1 <- "2022-01-17 09:00:00"
# 문자열을 날짜형으로
d <- as.Date(x1, "%Y-%m-%d %H:%M:%S")
d
class(d)
# 문자열을 날짜+시간형으로
t <- strptime(x1, "%Y-%m-%d %H:%M:%S")
t
class(t)
strptime('2022-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
as.POSIXlt("2022/01/01 10:30:11",format="%Y/%m/%d %S:%M:%H")
as.Date("2022/01/01 08:00:00") - as.Date("2022/01/01 05:00:00")
as.POSIXct("2022/01/01 08:00:00") - as.POSIXct("2022/01/01 05:00:00")
as.POSIXlt("2022/01/01 08:00:00") - as.POSIXlt("2022/01/01 05:00:00")
ct<-Sys.time()
lt<-as.POSIXlt(ct)
str(ct)
str(lt)
ct
lt
unclass(ct)
unclass(lt)
lt$mon+1
lt$hour
lt$year+1900
?as.POSIXlt
as.POSIXct(1449894438,origin="1970-01-01")
as.POSIXlt(1449894438,origin="1970-01-01")
as.POSIXlt("2022/05/01")$wday
as.POSIXlt("2022/05/02")$wday
as.POSIXlt("2022/05/03")$wday
as.POSIXlt("2022/05/04")$wday
as.POSIXlt("2022/05/05")$wday
?wady
?wday
#올해의 크리스마스 요일 2가지방법(요일명,숫자)
christmas2<-as.POSIXlt("2022-12-25")
weekdays(christmas2)
christmas2$wday
#2022년 1월 1일 어떤 요일
tmp<-as.POSIXct("2022-01-01")
weekdays(tmp)
#오늘은 xxxx년x월xx일x요일입니다 형식으로 출력
tmp<-Sys.Date()
year<-format(tmp,'%Y')
month<-format(tmp,'%m')
day<-format(tmp,'%d')
weekday<-format(tmp,'%A')
cat("오늘은 ",year,"년 ",month,"월 ",day,"일 ",weekday," 입니다.\n",sep="")
format(tmp,'오늘은 %Y년 %B %d일 %A입니다')
# 문제4
mySum <- function(v) {
oddSum <- 0
evenSum <- 0
if (is.null(v)) {
return()
} else if (!is.vector(v)) {
stop('벡터만 처리 가능!!')
} else if (any(is.na(v))) {
warning('NA를 최저값으로 변경하여 처리함!!')
v[is.na(v)] <- min(v, na.rm = T)
}
oddSum <- sum(v[seq(from=1, to=length(v), by=2)])
evenSum <- sum(v[seq(from=2, to=length(v), by=2)])
return(list(evenSum, oddSum))
}
mySum(array(1:10))
mySum(c(19,1,NA,5,4,NA,11))
mySum(1:10)
mySum(NULL)
sample(1,45,6)
sample(1:45,6)
